-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity soft_max is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dense_array_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dense_array_ce0 : OUT STD_LOGIC;
    dense_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pred_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    pred_V_V_TVALID : OUT STD_LOGIC;
    pred_V_V_TREADY : IN STD_LOGIC );
end;


architecture behav of soft_max is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (35 downto 0) := "000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (35 downto 0) := "000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (35 downto 0) := "000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (35 downto 0) := "000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (35 downto 0) := "000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (35 downto 0) := "000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (35 downto 0) := "000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (35 downto 0) := "000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (35 downto 0) := "000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (35 downto 0) := "001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (35 downto 0) := "010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (35 downto 0) := "100000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_9 : STD_LOGIC_VECTOR (11 downto 0) := "000000001001";
    constant ap_const_lv12_FF7 : STD_LOGIC_VECTOR (11 downto 0) := "111111110111";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_F : STD_LOGIC_VECTOR (11 downto 0) := "000000001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv15_7FFF : STD_LOGIC_VECTOR (14 downto 0) := "111111111111111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal pred_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_143_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i_fu_166_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_477 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln15_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_130_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal j_fu_183_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_495 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln20_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_assign_reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal p_Result_s_reg_511 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal trunc_ln565_fu_224_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_reg_516 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln571_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_521 : STD_LOGIC_VECTOR (0 downto 0);
    signal F2_fu_234_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_reg_527 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum_0_reg_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_108 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_reg_119 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln17_fu_172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_fu_189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_140_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_210_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln556_fu_198_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_220_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_240_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_1_fu_247_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_251_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln581_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_269_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_274_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_279_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_2_fu_257_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln581_fu_287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_312_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_316_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln696_fu_326_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_329_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_296_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln581cast_fu_345_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln582_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_349_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln586_fu_322_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal and_ln585_1_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_337_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal and_ln582_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_fu_419_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln603_1_fu_433_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln603_1_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_2_fu_447_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_V_fu_461_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (35 downto 0);

    component cnn_fadd_32ns_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fdiv_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fpext_32ns_64dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component cnn_fexp_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    cnn_fadd_32ns_32nbkb_U38 : component cnn_fadd_32ns_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_0_reg_96,
        din1 => reg_154,
        ce => ap_const_logic_1,
        dout => grp_fu_130_p2);

    cnn_fdiv_32ns_32ncud_U39 : component cnn_fdiv_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_154,
        din1 => sum_0_reg_96,
        ce => ap_const_logic_1,
        dout => grp_fu_135_p2);

    cnn_fpext_32ns_64dEe_U40 : component cnn_fpext_32ns_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v_assign_reg_505,
        ce => ap_const_logic_1,
        dout => grp_fu_140_p1);

    cnn_fexp_32ns_32neOg_U41 : component cnn_fexp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => dense_array_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_143_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_0_reg_108 <= i_reg_477;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_108 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln15_fu_160_p2 = ap_const_lv1_1))) then 
                j_0_reg_119 <= ap_const_lv4_0;
            elsif (((pred_V_V_TREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                j_0_reg_119 <= j_reg_495;
            end if; 
        end if;
    end process;

    sum_0_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                sum_0_reg_96 <= grp_fu_130_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sum_0_reg_96 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                F2_reg_527 <= F2_fu_234_p2;
                icmp_ln571_reg_521 <= icmp_ln571_fu_228_p2;
                p_Result_s_reg_511 <= ireg_V_fu_194_p1(63 downto 63);
                trunc_ln565_reg_516 <= trunc_ln565_fu_224_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_477 <= i_fu_166_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                j_reg_495 <= j_fu_183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_154 <= grp_fu_143_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                v_assign_reg_505 <= grp_fu_135_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, pred_V_V_TREADY, ap_CS_fsm_state36, ap_CS_fsm_state2, icmp_ln15_fu_160_p2, ap_CS_fsm_state15, icmp_ln20_fu_177_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln15_fu_160_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln20_fu_177_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((pred_V_V_TREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_234_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_220_p1));
    add_ln581_fu_269_p2 <= std_logic_vector(signed(ap_const_lv12_FF7) + signed(F2_reg_527));
    and_ln581_fu_377_p2 <= (xor_ln582_fu_371_p2 and icmp_ln581_fu_264_p2);
    and_ln582_fu_360_p2 <= (xor_ln571_fu_355_p2 and icmp_ln582_fu_291_p2);
    and_ln585_1_fu_395_p2 <= (icmp_ln585_fu_300_p2 and and_ln581_fu_377_p2);
    and_ln585_fu_389_p2 <= (xor_ln585_fu_383_p2 and and_ln581_fu_377_p2);
    and_ln603_fu_413_p2 <= (xor_ln581_fu_407_p2 and icmp_ln603_fu_306_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state15, icmp_ln20_fu_177_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln20_fu_177_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15, icmp_ln20_fu_177_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln20_fu_177_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_fu_316_p2 <= std_logic_vector(shift_right(signed(man_V_2_fu_257_p3),to_integer(unsigned('0' & zext_ln586_fu_312_p1(31-1 downto 0)))));
    bitcast_ln696_fu_326_p1 <= v_assign_reg_505;

    dense_array_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state15, zext_ln17_fu_172_p1, zext_ln22_fu_189_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            dense_array_address0 <= zext_ln22_fu_189_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dense_array_address0 <= zext_ln17_fu_172_p1(4 - 1 downto 0);
        else 
            dense_array_address0 <= "XXXX";
        end if; 
    end process;


    dense_array_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            dense_array_ce0 <= ap_const_logic_1;
        else 
            dense_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_tmp_V_fu_210_p4 <= ireg_V_fu_194_p1(62 downto 52);
    i_fu_166_p2 <= std_logic_vector(unsigned(i_0_reg_108) + unsigned(ap_const_lv4_1));
    icmp_ln15_fu_160_p2 <= "1" when (i_0_reg_108 = ap_const_lv4_A) else "0";
    icmp_ln20_fu_177_p2 <= "1" when (j_0_reg_119 = ap_const_lv4_A) else "0";
    icmp_ln571_fu_228_p2 <= "1" when (trunc_ln556_fu_198_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_264_p2 <= "1" when (signed(F2_reg_527) > signed(ap_const_lv12_9)) else "0";
    icmp_ln582_fu_291_p2 <= "1" when (F2_reg_527 = ap_const_lv12_9) else "0";
    icmp_ln585_fu_300_p2 <= "1" when (unsigned(sh_amt_fu_279_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_306_p2 <= "1" when (unsigned(sh_amt_fu_279_p3) < unsigned(ap_const_lv12_F)) else "0";
    ireg_V_fu_194_p1 <= grp_fu_140_p1;
    j_fu_183_p2 <= std_logic_vector(unsigned(j_0_reg_119) + unsigned(ap_const_lv4_1));
    man_V_1_fu_251_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_1_fu_247_p1));
    man_V_2_fu_257_p3 <= 
        man_V_1_fu_251_p2 when (p_Result_s_reg_511(0) = '1') else 
        p_Result_1_fu_247_p1;
    or_ln581_fu_401_p2 <= (or_ln582_fu_366_p2 or icmp_ln581_fu_264_p2);
    or_ln582_fu_366_p2 <= (icmp_ln582_fu_291_p2 or icmp_ln571_reg_521);
    or_ln603_1_fu_441_p2 <= (and_ln585_fu_389_p2 or and_ln582_fu_360_p2);
    or_ln603_2_fu_455_p2 <= (or_ln603_fu_427_p2 or or_ln603_1_fu_441_p2);
    or_ln603_fu_427_p2 <= (and_ln603_fu_413_p2 or and_ln585_1_fu_395_p2);
    p_Result_1_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_240_p3),54));
        pred_V_V_TDATA <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_fu_461_p3),16));


    pred_V_V_TDATA_blk_n_assign_proc : process(pred_V_V_TREADY, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            pred_V_V_TDATA_blk_n <= pred_V_V_TREADY;
        else 
            pred_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pred_V_V_TVALID_assign_proc : process(pred_V_V_TREADY, ap_CS_fsm_state36)
    begin
        if (((pred_V_V_TREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            pred_V_V_TVALID <= ap_const_logic_1;
        else 
            pred_V_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    select_ln588_fu_337_p3 <= 
        ap_const_lv15_7FFF when (tmp_4_fu_329_p3(0) = '1') else 
        ap_const_lv15_0;
    select_ln603_1_fu_433_p3 <= 
        select_ln588_fu_337_p3 when (and_ln585_fu_389_p2(0) = '1') else 
        trunc_ln583_fu_296_p1;
    select_ln603_2_fu_447_p3 <= 
        select_ln603_fu_419_p3 when (or_ln603_fu_427_p2(0) = '1') else 
        select_ln603_1_fu_433_p3;
    select_ln603_fu_419_p3 <= 
        shl_ln604_fu_349_p2 when (and_ln603_fu_413_p2(0) = '1') else 
        trunc_ln586_fu_322_p1;
        sext_ln581_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_279_p3),32));

    sext_ln581cast_fu_345_p1 <= sext_ln581_fu_287_p1(15 - 1 downto 0);
    sh_amt_fu_279_p3 <= 
        add_ln581_fu_269_p2 when (icmp_ln581_fu_264_p2(0) = '1') else 
        sub_ln581_fu_274_p2;
    shl_ln604_fu_349_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_fu_296_p1),to_integer(unsigned('0' & sext_ln581cast_fu_345_p1(15-1 downto 0)))));
    sub_ln581_fu_274_p2 <= std_logic_vector(unsigned(ap_const_lv12_9) - unsigned(F2_reg_527));
    tmp_1_fu_240_p3 <= (ap_const_lv1_1 & trunc_ln565_reg_516);
    tmp_4_fu_329_p3 <= bitcast_ln696_fu_326_p1(31 downto 31);
    tmp_V_fu_461_p3 <= 
        select_ln603_2_fu_447_p3 when (or_ln603_2_fu_455_p2(0) = '1') else 
        ap_const_lv15_0;
    trunc_ln556_fu_198_p1 <= ireg_V_fu_194_p1(63 - 1 downto 0);
    trunc_ln565_fu_224_p1 <= ireg_V_fu_194_p1(52 - 1 downto 0);
    trunc_ln583_fu_296_p1 <= man_V_2_fu_257_p3(15 - 1 downto 0);
    trunc_ln586_fu_322_p1 <= ashr_ln586_fu_316_p2(15 - 1 downto 0);
    xor_ln571_fu_355_p2 <= (icmp_ln571_reg_521 xor ap_const_lv1_1);
    xor_ln581_fu_407_p2 <= (or_ln581_fu_401_p2 xor ap_const_lv1_1);
    xor_ln582_fu_371_p2 <= (or_ln582_fu_366_p2 xor ap_const_lv1_1);
    xor_ln585_fu_383_p2 <= (icmp_ln585_fu_300_p2 xor ap_const_lv1_1);
    zext_ln17_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_108),64));
    zext_ln22_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_119),64));
    zext_ln461_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_210_p4),12));
    zext_ln586_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_287_p1),54));
end behav;
