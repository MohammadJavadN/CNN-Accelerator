-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity flattening_layer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pool_features_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pool_features_V_ce0 : OUT STD_LOGIC;
    pool_features_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    flat_array_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    flat_array_V_ce0 : OUT STD_LOGIC;
    flat_array_V_we0 : OUT STD_LOGIC;
    flat_array_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of flattening_layer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal f_fu_138_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_reg_237 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal index_fu_144_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal index_reg_242 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln12_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_fu_158_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln13_reg_247 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_fu_168_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_reg_255 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln17_fu_174_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln17_reg_260 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln13_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_cast_fu_189_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_cast_reg_265 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_fu_203_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_273 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln14_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln17_1_fu_228_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal index_0_reg_65 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_0_reg_77 : STD_LOGIC_VECTOR (3 downto 0);
    signal index_1_reg_88 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_0_reg_99 : STD_LOGIC_VECTOR (2 downto 0);
    signal index_2_reg_110 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_0_reg_121 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln203_7_fu_218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_fu_223_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_150_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln203_fu_180_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln203_fu_184_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln203_6_fu_209_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln203_2_fu_213_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                c_0_reg_121 <= c_reg_273;
            elsif (((icmp_ln13_fu_162_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c_0_reg_121 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_77_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_162_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_reg_77 <= f_reg_237;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_77 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    index_0_reg_65_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_162_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                index_0_reg_65 <= index_reg_242;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                index_0_reg_65 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    index_1_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                index_1_reg_88 <= add_ln17_reg_260;
            elsif (((icmp_ln12_fu_132_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                index_1_reg_88 <= index_0_reg_65;
            end if; 
        end if;
    end process;

    index_2_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                index_2_reg_110 <= add_ln17_1_fu_228_p2;
            elsif (((icmp_ln13_fu_162_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                index_2_reg_110 <= index_1_reg_88;
            end if; 
        end if;
    end process;

    r_0_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                r_0_reg_99 <= r_reg_255;
            elsif (((icmp_ln12_fu_132_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                r_0_reg_99 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_162_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln17_reg_260 <= add_ln17_fu_174_p2;
                    tmp_8_cast_reg_265(8 downto 2) <= tmp_8_cast_fu_189_p3(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                c_reg_273 <= c_fu_203_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                f_reg_237 <= f_fu_138_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_132_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                index_reg_242 <= index_fu_144_p2;
                    zext_ln13_reg_247(5 downto 2) <= zext_ln13_fu_158_p1(5 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                r_reg_255 <= r_fu_168_p2;
            end if;
        end if;
    end process;
    zext_ln13_reg_247(1 downto 0) <= "00";
    zext_ln13_reg_247(6) <= '0';
    tmp_8_cast_reg_265(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln12_fu_132_p2, ap_CS_fsm_state3, icmp_ln13_fu_162_p2, ap_CS_fsm_state4, icmp_ln14_fu_197_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln12_fu_132_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln13_fu_162_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln14_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln17_1_fu_228_p2 <= std_logic_vector(unsigned(index_2_reg_110) + unsigned(ap_const_lv8_1));
    add_ln17_fu_174_p2 <= std_logic_vector(unsigned(index_1_reg_88) + unsigned(ap_const_lv8_4));
    add_ln203_2_fu_213_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_265) + unsigned(zext_ln203_6_fu_209_p1));
    add_ln203_fu_184_p2 <= std_logic_vector(unsigned(zext_ln203_fu_180_p1) + unsigned(zext_ln13_reg_247));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln12_fu_132_p2)
    begin
        if ((((icmp_ln12_fu_132_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln12_fu_132_p2)
    begin
        if (((icmp_ln12_fu_132_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_203_p2 <= std_logic_vector(unsigned(c_0_reg_121) + unsigned(ap_const_lv3_1));
    f_fu_138_p2 <= std_logic_vector(unsigned(f_0_reg_77) + unsigned(ap_const_lv4_1));
    flat_array_V_address0 <= zext_ln16_fu_223_p1(8 - 1 downto 0);

    flat_array_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            flat_array_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_V_d0 <= pool_features_V_q0;

    flat_array_V_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            flat_array_V_we0 <= ap_const_logic_1;
        else 
            flat_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln12_fu_132_p2 <= "1" when (f_0_reg_77 = ap_const_lv4_A) else "0";
    icmp_ln13_fu_162_p2 <= "1" when (r_0_reg_99 = ap_const_lv3_4) else "0";
    icmp_ln14_fu_197_p2 <= "1" when (c_0_reg_121 = ap_const_lv3_4) else "0";
    index_fu_144_p2 <= std_logic_vector(unsigned(index_0_reg_65) + unsigned(ap_const_lv8_10));
    pool_features_V_address0 <= zext_ln203_7_fu_218_p1(8 - 1 downto 0);

    pool_features_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pool_features_V_ce0 <= ap_const_logic_1;
        else 
            pool_features_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_168_p2 <= std_logic_vector(unsigned(r_0_reg_99) + unsigned(ap_const_lv3_1));
    tmp_8_cast_fu_189_p3 <= (add_ln203_fu_184_p2 & ap_const_lv2_0);
    tmp_fu_150_p3 <= (f_0_reg_77 & ap_const_lv2_0);
    zext_ln13_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_150_p3),7));
    zext_ln16_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_2_reg_110),64));
    zext_ln203_6_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_121),9));
    zext_ln203_7_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_2_fu_213_p2),64));
    zext_ln203_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_reg_99),7));
end behav;
