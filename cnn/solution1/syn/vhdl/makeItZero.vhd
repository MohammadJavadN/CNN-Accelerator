-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity makeItZero is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_0_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_0_V_ce0 : OUT STD_LOGIC;
    A_0_V_we0 : OUT STD_LOGIC;
    A_0_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_1_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_1_V_ce0 : OUT STD_LOGIC;
    A_1_V_we0 : OUT STD_LOGIC;
    A_1_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_2_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_2_V_ce0 : OUT STD_LOGIC;
    A_2_V_we0 : OUT STD_LOGIC;
    A_2_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_3_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_3_V_ce0 : OUT STD_LOGIC;
    A_3_V_we0 : OUT STD_LOGIC;
    A_3_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_4_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_4_V_ce0 : OUT STD_LOGIC;
    A_4_V_we0 : OUT STD_LOGIC;
    A_4_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_5_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_5_V_ce0 : OUT STD_LOGIC;
    A_5_V_we0 : OUT STD_LOGIC;
    A_5_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_6_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_6_V_ce0 : OUT STD_LOGIC;
    A_6_V_we0 : OUT STD_LOGIC;
    A_6_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_7_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_7_V_ce0 : OUT STD_LOGIC;
    A_7_V_we0 : OUT STD_LOGIC;
    A_7_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_8_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_8_V_ce0 : OUT STD_LOGIC;
    A_8_V_we0 : OUT STD_LOGIC;
    A_8_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_9_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_9_V_ce0 : OUT STD_LOGIC;
    A_9_V_we0 : OUT STD_LOGIC;
    A_9_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of makeItZero is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal f_fu_234_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_reg_302 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal row_fu_246_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_reg_310 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln7_fu_260_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln7_reg_315 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln6_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_fu_270_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal f_0_reg_194 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_0_reg_206 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln7_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_0_reg_217 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln203_5_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_252_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln203_fu_276_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln203_fu_280_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    col_0_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln6_fu_240_p2 = ap_const_lv1_0))) then 
                col_0_reg_217 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln7_fu_264_p2 = ap_const_lv1_0))) then 
                col_0_reg_217 <= col_fu_270_p2;
            end if; 
        end if;
    end process;

    f_0_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln6_fu_240_p2 = ap_const_lv1_1))) then 
                f_0_reg_194 <= f_reg_302;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_194 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    row_0_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln5_fu_228_p2 = ap_const_lv1_0))) then 
                row_0_reg_206 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln7_fu_264_p2 = ap_const_lv1_1))) then 
                row_0_reg_206 <= row_reg_310;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                f_reg_302 <= f_fu_234_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                row_reg_310 <= row_fu_246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln6_fu_240_p2 = ap_const_lv1_0))) then
                    zext_ln7_reg_315(6 downto 3) <= zext_ln7_fu_260_p1(6 downto 3);
            end if;
        end if;
    end process;
    zext_ln7_reg_315(2 downto 0) <= "000";
    zext_ln7_reg_315(7) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln6_fu_240_p2, ap_CS_fsm_state4, icmp_ln7_fu_264_p2, icmp_ln5_fu_228_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln5_fu_228_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln6_fu_240_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln7_fu_264_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    A_0_V_address0 <= zext_ln203_5_fu_285_p1(6 - 1 downto 0);

    A_0_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_0_V_ce0 <= ap_const_logic_1;
        else 
            A_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_0_V_d0 <= ap_const_lv14_0;

    A_0_V_we0_assign_proc : process(ap_CS_fsm_state4, f_0_reg_194, icmp_ln7_fu_264_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (f_0_reg_194 = ap_const_lv4_0) and (icmp_ln7_fu_264_p2 = ap_const_lv1_0))) then 
            A_0_V_we0 <= ap_const_logic_1;
        else 
            A_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_1_V_address0 <= zext_ln203_5_fu_285_p1(6 - 1 downto 0);

    A_1_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_1_V_ce0 <= ap_const_logic_1;
        else 
            A_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_1_V_d0 <= ap_const_lv14_0;

    A_1_V_we0_assign_proc : process(ap_CS_fsm_state4, f_0_reg_194, icmp_ln7_fu_264_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (f_0_reg_194 = ap_const_lv4_1) and (icmp_ln7_fu_264_p2 = ap_const_lv1_0))) then 
            A_1_V_we0 <= ap_const_logic_1;
        else 
            A_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_2_V_address0 <= zext_ln203_5_fu_285_p1(6 - 1 downto 0);

    A_2_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_2_V_ce0 <= ap_const_logic_1;
        else 
            A_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_2_V_d0 <= ap_const_lv14_0;

    A_2_V_we0_assign_proc : process(ap_CS_fsm_state4, f_0_reg_194, icmp_ln7_fu_264_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (f_0_reg_194 = ap_const_lv4_2) and (icmp_ln7_fu_264_p2 = ap_const_lv1_0))) then 
            A_2_V_we0 <= ap_const_logic_1;
        else 
            A_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_3_V_address0 <= zext_ln203_5_fu_285_p1(6 - 1 downto 0);

    A_3_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_3_V_ce0 <= ap_const_logic_1;
        else 
            A_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_3_V_d0 <= ap_const_lv14_0;

    A_3_V_we0_assign_proc : process(ap_CS_fsm_state4, f_0_reg_194, icmp_ln7_fu_264_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (f_0_reg_194 = ap_const_lv4_3) and (icmp_ln7_fu_264_p2 = ap_const_lv1_0))) then 
            A_3_V_we0 <= ap_const_logic_1;
        else 
            A_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_4_V_address0 <= zext_ln203_5_fu_285_p1(6 - 1 downto 0);

    A_4_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_4_V_ce0 <= ap_const_logic_1;
        else 
            A_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_4_V_d0 <= ap_const_lv14_0;

    A_4_V_we0_assign_proc : process(ap_CS_fsm_state4, f_0_reg_194, icmp_ln7_fu_264_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (f_0_reg_194 = ap_const_lv4_4) and (icmp_ln7_fu_264_p2 = ap_const_lv1_0))) then 
            A_4_V_we0 <= ap_const_logic_1;
        else 
            A_4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_5_V_address0 <= zext_ln203_5_fu_285_p1(6 - 1 downto 0);

    A_5_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_5_V_ce0 <= ap_const_logic_1;
        else 
            A_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_5_V_d0 <= ap_const_lv14_0;

    A_5_V_we0_assign_proc : process(ap_CS_fsm_state4, f_0_reg_194, icmp_ln7_fu_264_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (f_0_reg_194 = ap_const_lv4_5) and (icmp_ln7_fu_264_p2 = ap_const_lv1_0))) then 
            A_5_V_we0 <= ap_const_logic_1;
        else 
            A_5_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_6_V_address0 <= zext_ln203_5_fu_285_p1(6 - 1 downto 0);

    A_6_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_6_V_ce0 <= ap_const_logic_1;
        else 
            A_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_6_V_d0 <= ap_const_lv14_0;

    A_6_V_we0_assign_proc : process(ap_CS_fsm_state4, f_0_reg_194, icmp_ln7_fu_264_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (f_0_reg_194 = ap_const_lv4_6) and (icmp_ln7_fu_264_p2 = ap_const_lv1_0))) then 
            A_6_V_we0 <= ap_const_logic_1;
        else 
            A_6_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_7_V_address0 <= zext_ln203_5_fu_285_p1(6 - 1 downto 0);

    A_7_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_7_V_ce0 <= ap_const_logic_1;
        else 
            A_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_7_V_d0 <= ap_const_lv14_0;

    A_7_V_we0_assign_proc : process(ap_CS_fsm_state4, f_0_reg_194, icmp_ln7_fu_264_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (f_0_reg_194 = ap_const_lv4_7) and (icmp_ln7_fu_264_p2 = ap_const_lv1_0))) then 
            A_7_V_we0 <= ap_const_logic_1;
        else 
            A_7_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_8_V_address0 <= zext_ln203_5_fu_285_p1(6 - 1 downto 0);

    A_8_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_8_V_ce0 <= ap_const_logic_1;
        else 
            A_8_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_8_V_d0 <= ap_const_lv14_0;

    A_8_V_we0_assign_proc : process(ap_CS_fsm_state4, f_0_reg_194, icmp_ln7_fu_264_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (f_0_reg_194 = ap_const_lv4_8) and (icmp_ln7_fu_264_p2 = ap_const_lv1_0))) then 
            A_8_V_we0 <= ap_const_logic_1;
        else 
            A_8_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_9_V_address0 <= zext_ln203_5_fu_285_p1(6 - 1 downto 0);

    A_9_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_9_V_ce0 <= ap_const_logic_1;
        else 
            A_9_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_9_V_d0 <= ap_const_lv14_0;

    A_9_V_we0_assign_proc : process(ap_CS_fsm_state4, f_0_reg_194, icmp_ln7_fu_264_p2)
    begin
        if ((not((f_0_reg_194 = ap_const_lv4_0)) and not((f_0_reg_194 = ap_const_lv4_1)) and not((f_0_reg_194 = ap_const_lv4_2)) and not((f_0_reg_194 = ap_const_lv4_3)) and not((f_0_reg_194 = ap_const_lv4_4)) and not((f_0_reg_194 = ap_const_lv4_5)) and not((f_0_reg_194 = ap_const_lv4_6)) and not((f_0_reg_194 = ap_const_lv4_7)) and not((f_0_reg_194 = ap_const_lv4_8)) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln7_fu_264_p2 = ap_const_lv1_0))) then 
            A_9_V_we0 <= ap_const_logic_1;
        else 
            A_9_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln203_fu_280_p2 <= std_logic_vector(unsigned(zext_ln7_reg_315) + unsigned(zext_ln203_fu_276_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln5_fu_228_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln5_fu_228_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln5_fu_228_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln5_fu_228_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_fu_270_p2 <= std_logic_vector(unsigned(col_0_reg_217) + unsigned(ap_const_lv4_1));
    f_fu_234_p2 <= std_logic_vector(unsigned(f_0_reg_194) + unsigned(ap_const_lv4_1));
    icmp_ln5_fu_228_p2 <= "1" when (f_0_reg_194 = ap_const_lv4_A) else "0";
    icmp_ln6_fu_240_p2 <= "1" when (row_0_reg_206 = ap_const_lv4_8) else "0";
    icmp_ln7_fu_264_p2 <= "1" when (col_0_reg_217 = ap_const_lv4_8) else "0";
    row_fu_246_p2 <= std_logic_vector(unsigned(row_0_reg_206) + unsigned(ap_const_lv4_1));
    tmp_fu_252_p3 <= (row_0_reg_206 & ap_const_lv3_0);
    zext_ln203_5_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_fu_280_p2),64));
    zext_ln203_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_0_reg_217),8));
    zext_ln7_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_252_p3),8));
end behav;
