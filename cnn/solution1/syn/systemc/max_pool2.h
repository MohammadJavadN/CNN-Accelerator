// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _max_pool2_HH_
#define _max_pool2_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "cnn_fadd_32ns_32ncud.h"
#include "cnn_fcmp_32ns_32nbkb.h"
#include "cnn_mux_104_32_1_1.h"

namespace ap_rtl {

struct max_pool2 : public sc_module {
    // Port declarations 42
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<6> > feature_0_address0;
    sc_out< sc_logic > feature_0_ce0;
    sc_in< sc_lv<32> > feature_0_q0;
    sc_out< sc_lv<6> > feature_1_address0;
    sc_out< sc_logic > feature_1_ce0;
    sc_in< sc_lv<32> > feature_1_q0;
    sc_out< sc_lv<6> > feature_2_address0;
    sc_out< sc_logic > feature_2_ce0;
    sc_in< sc_lv<32> > feature_2_q0;
    sc_out< sc_lv<6> > feature_3_address0;
    sc_out< sc_logic > feature_3_ce0;
    sc_in< sc_lv<32> > feature_3_q0;
    sc_out< sc_lv<6> > feature_4_address0;
    sc_out< sc_logic > feature_4_ce0;
    sc_in< sc_lv<32> > feature_4_q0;
    sc_out< sc_lv<6> > feature_5_address0;
    sc_out< sc_logic > feature_5_ce0;
    sc_in< sc_lv<32> > feature_5_q0;
    sc_out< sc_lv<6> > feature_6_address0;
    sc_out< sc_logic > feature_6_ce0;
    sc_in< sc_lv<32> > feature_6_q0;
    sc_out< sc_lv<6> > feature_7_address0;
    sc_out< sc_logic > feature_7_ce0;
    sc_in< sc_lv<32> > feature_7_q0;
    sc_out< sc_lv<6> > feature_8_address0;
    sc_out< sc_logic > feature_8_ce0;
    sc_in< sc_lv<32> > feature_8_q0;
    sc_out< sc_lv<6> > feature_9_address0;
    sc_out< sc_logic > feature_9_ce0;
    sc_in< sc_lv<32> > feature_9_q0;
    sc_in< sc_lv<4> > feature_offset;
    sc_out< sc_lv<8> > pool_feature_address0;
    sc_out< sc_logic > pool_feature_ce0;
    sc_out< sc_logic > pool_feature_we0;
    sc_out< sc_lv<32> > pool_feature_d0;
    sc_in< sc_lv<32> > b;
    sc_signal< sc_lv<5> > ap_var_for_const0;


    // Module declarations
    max_pool2(sc_module_name name);
    SC_HAS_PROCESS(max_pool2);

    ~max_pool2();

    sc_trace_file* mVcdFile;

    cnn_fadd_32ns_32ncud<1,1,32,32,32>* cnn_fadd_32ns_32ncud_U13;
    cnn_fcmp_32ns_32nbkb<1,1,32,32,1>* cnn_fcmp_32ns_32nbkb_U14;
    cnn_mux_104_32_1_1<1,1,32,32,32,32,32,32,32,32,32,32,4,32>* cnn_mux_104_32_1_1_U15;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<2> > trunc_ln28_1_reg_640;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_7_fu_317_p3;
    sc_signal< sc_lv<4> > r_fu_343_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > tmp_8_fu_335_p3;
    sc_signal< sc_lv<2> > pr_fu_359_p2;
    sc_signal< sc_lv<2> > pr_reg_656;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<8> > zext_ln22_1_fu_379_p1;
    sc_signal< sc_lv<8> > zext_ln22_1_reg_661;
    sc_signal< sc_lv<1> > icmp_ln21_fu_353_p2;
    sc_signal< sc_lv<4> > c_fu_457_p2;
    sc_signal< sc_lv<2> > pc_fu_473_p2;
    sc_signal< sc_lv<2> > pc_reg_674;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > icmp_ln22_fu_467_p2;
    sc_signal< sc_lv<32> > pool_2_fu_618_p3;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<4> > r_0_reg_235;
    sc_signal< sc_lv<4> > c_0_reg_247;
    sc_signal< sc_lv<32> > pool_0_reg_259;
    sc_signal< sc_lv<2> > pr_0_reg_271;
    sc_signal< sc_lv<32> > pool_1_reg_282;
    sc_signal< sc_lv<2> > pc_0_reg_294;
    sc_signal< sc_lv<64> > zext_ln28_fu_452_p1;
    sc_signal< sc_lv<64> > zext_ln24_1_fu_494_p1;
    sc_signal< sc_lv<32> > grp_fu_310_p0;
    sc_signal< sc_lv<32> > x_assign_fu_305_p2;
    sc_signal< sc_lv<32> > pool_fu_508_p12;
    sc_signal< sc_lv<32> > grp_fu_310_p1;
    sc_signal< sc_lv<4> > zext_ln21_fu_349_p1;
    sc_signal< sc_lv<4> > add_ln24_fu_365_p2;
    sc_signal< sc_lv<7> > tmp_6_fu_371_p3;
    sc_signal< sc_lv<32> > bitcast_ln7_fu_383_p1;
    sc_signal< sc_lv<8> > tmp_fu_387_p4;
    sc_signal< sc_lv<23> > trunc_ln7_fu_397_p1;
    sc_signal< sc_lv<1> > icmp_ln7_1_fu_407_p2;
    sc_signal< sc_lv<1> > icmp_ln7_fu_401_p2;
    sc_signal< sc_lv<1> > or_ln7_fu_413_p2;
    sc_signal< sc_lv<1> > grp_fu_310_p2;
    sc_signal< sc_lv<1> > and_ln7_fu_419_p2;
    sc_signal< sc_lv<2> > trunc_ln28_3_fu_434_p4;
    sc_signal< sc_lv<8> > tmp_2_fu_444_p4;
    sc_signal< sc_lv<4> > zext_ln22_fu_463_p1;
    sc_signal< sc_lv<4> > add_ln24_1_fu_479_p2;
    sc_signal< sc_lv<8> > zext_ln24_fu_485_p1;
    sc_signal< sc_lv<8> > add_ln24_2_fu_489_p2;
    sc_signal< sc_lv<32> > bitcast_ln24_fu_534_p1;
    sc_signal< sc_lv<32> > bitcast_ln24_1_fu_552_p1;
    sc_signal< sc_lv<8> > tmp_3_fu_538_p4;
    sc_signal< sc_lv<23> > trunc_ln24_fu_548_p1;
    sc_signal< sc_lv<1> > icmp_ln24_1_fu_576_p2;
    sc_signal< sc_lv<1> > icmp_ln24_fu_570_p2;
    sc_signal< sc_lv<8> > tmp_4_fu_556_p4;
    sc_signal< sc_lv<23> > trunc_ln24_1_fu_566_p1;
    sc_signal< sc_lv<1> > icmp_ln24_3_fu_594_p2;
    sc_signal< sc_lv<1> > icmp_ln24_2_fu_588_p2;
    sc_signal< sc_lv<1> > or_ln24_fu_582_p2;
    sc_signal< sc_lv<1> > or_ln24_1_fu_600_p2;
    sc_signal< sc_lv<1> > and_ln24_fu_606_p2;
    sc_signal< sc_lv<1> > and_ln24_1_fu_612_p2;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_800000;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_2;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<5> ap_const_lv5_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln24_1_fu_479_p2();
    void thread_add_ln24_2_fu_489_p2();
    void thread_add_ln24_fu_365_p2();
    void thread_and_ln24_1_fu_612_p2();
    void thread_and_ln24_fu_606_p2();
    void thread_and_ln7_fu_419_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_bitcast_ln24_1_fu_552_p1();
    void thread_bitcast_ln24_fu_534_p1();
    void thread_bitcast_ln7_fu_383_p1();
    void thread_c_fu_457_p2();
    void thread_feature_0_address0();
    void thread_feature_0_ce0();
    void thread_feature_1_address0();
    void thread_feature_1_ce0();
    void thread_feature_2_address0();
    void thread_feature_2_ce0();
    void thread_feature_3_address0();
    void thread_feature_3_ce0();
    void thread_feature_4_address0();
    void thread_feature_4_ce0();
    void thread_feature_5_address0();
    void thread_feature_5_ce0();
    void thread_feature_6_address0();
    void thread_feature_6_ce0();
    void thread_feature_7_address0();
    void thread_feature_7_ce0();
    void thread_feature_8_address0();
    void thread_feature_8_ce0();
    void thread_feature_9_address0();
    void thread_feature_9_ce0();
    void thread_grp_fu_310_p0();
    void thread_grp_fu_310_p1();
    void thread_icmp_ln21_fu_353_p2();
    void thread_icmp_ln22_fu_467_p2();
    void thread_icmp_ln24_1_fu_576_p2();
    void thread_icmp_ln24_2_fu_588_p2();
    void thread_icmp_ln24_3_fu_594_p2();
    void thread_icmp_ln24_fu_570_p2();
    void thread_icmp_ln7_1_fu_407_p2();
    void thread_icmp_ln7_fu_401_p2();
    void thread_or_ln24_1_fu_600_p2();
    void thread_or_ln24_fu_582_p2();
    void thread_or_ln7_fu_413_p2();
    void thread_pc_fu_473_p2();
    void thread_pool_2_fu_618_p3();
    void thread_pool_feature_address0();
    void thread_pool_feature_ce0();
    void thread_pool_feature_d0();
    void thread_pool_feature_we0();
    void thread_pr_fu_359_p2();
    void thread_r_fu_343_p2();
    void thread_tmp_2_fu_444_p4();
    void thread_tmp_3_fu_538_p4();
    void thread_tmp_4_fu_556_p4();
    void thread_tmp_6_fu_371_p3();
    void thread_tmp_7_fu_317_p3();
    void thread_tmp_8_fu_335_p3();
    void thread_tmp_fu_387_p4();
    void thread_trunc_ln24_1_fu_566_p1();
    void thread_trunc_ln24_fu_548_p1();
    void thread_trunc_ln28_3_fu_434_p4();
    void thread_trunc_ln7_fu_397_p1();
    void thread_zext_ln21_fu_349_p1();
    void thread_zext_ln22_1_fu_379_p1();
    void thread_zext_ln22_fu_463_p1();
    void thread_zext_ln24_1_fu_494_p1();
    void thread_zext_ln24_fu_485_p1();
    void thread_zext_ln28_fu_452_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
