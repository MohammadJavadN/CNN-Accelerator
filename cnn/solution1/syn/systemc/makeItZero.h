// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _makeItZero_HH_
#define _makeItZero_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct makeItZero : public sc_module {
    // Port declarations 46
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<6> > A_0_V_address0;
    sc_out< sc_logic > A_0_V_ce0;
    sc_out< sc_logic > A_0_V_we0;
    sc_out< sc_lv<15> > A_0_V_d0;
    sc_out< sc_lv<6> > A_1_V_address0;
    sc_out< sc_logic > A_1_V_ce0;
    sc_out< sc_logic > A_1_V_we0;
    sc_out< sc_lv<15> > A_1_V_d0;
    sc_out< sc_lv<6> > A_2_V_address0;
    sc_out< sc_logic > A_2_V_ce0;
    sc_out< sc_logic > A_2_V_we0;
    sc_out< sc_lv<15> > A_2_V_d0;
    sc_out< sc_lv<6> > A_3_V_address0;
    sc_out< sc_logic > A_3_V_ce0;
    sc_out< sc_logic > A_3_V_we0;
    sc_out< sc_lv<15> > A_3_V_d0;
    sc_out< sc_lv<6> > A_4_V_address0;
    sc_out< sc_logic > A_4_V_ce0;
    sc_out< sc_logic > A_4_V_we0;
    sc_out< sc_lv<15> > A_4_V_d0;
    sc_out< sc_lv<6> > A_5_V_address0;
    sc_out< sc_logic > A_5_V_ce0;
    sc_out< sc_logic > A_5_V_we0;
    sc_out< sc_lv<15> > A_5_V_d0;
    sc_out< sc_lv<6> > A_6_V_address0;
    sc_out< sc_logic > A_6_V_ce0;
    sc_out< sc_logic > A_6_V_we0;
    sc_out< sc_lv<15> > A_6_V_d0;
    sc_out< sc_lv<6> > A_7_V_address0;
    sc_out< sc_logic > A_7_V_ce0;
    sc_out< sc_logic > A_7_V_we0;
    sc_out< sc_lv<15> > A_7_V_d0;
    sc_out< sc_lv<6> > A_8_V_address0;
    sc_out< sc_logic > A_8_V_ce0;
    sc_out< sc_logic > A_8_V_we0;
    sc_out< sc_lv<15> > A_8_V_d0;
    sc_out< sc_lv<6> > A_9_V_address0;
    sc_out< sc_logic > A_9_V_ce0;
    sc_out< sc_logic > A_9_V_we0;
    sc_out< sc_lv<15> > A_9_V_d0;


    // Module declarations
    makeItZero(sc_module_name name);
    SC_HAS_PROCESS(makeItZero);

    ~makeItZero();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > f_fu_234_p2;
    sc_signal< sc_lv<4> > f_reg_302;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > row_fu_246_p2;
    sc_signal< sc_lv<4> > row_reg_310;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<8> > zext_ln7_fu_260_p1;
    sc_signal< sc_lv<8> > zext_ln7_reg_315;
    sc_signal< sc_lv<1> > icmp_ln6_fu_240_p2;
    sc_signal< sc_lv<4> > col_fu_270_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<4> > f_0_reg_194;
    sc_signal< sc_lv<4> > row_0_reg_206;
    sc_signal< sc_lv<1> > icmp_ln7_fu_264_p2;
    sc_signal< sc_lv<1> > icmp_ln5_fu_228_p2;
    sc_signal< sc_lv<4> > col_0_reg_217;
    sc_signal< sc_lv<64> > zext_ln203_5_fu_285_p1;
    sc_signal< sc_lv<7> > tmp_fu_252_p3;
    sc_signal< sc_lv<8> > zext_ln203_fu_276_p1;
    sc_signal< sc_lv<8> > add_ln203_fu_280_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<15> ap_const_lv15_0;
    static const sc_lv<4> ap_const_lv4_7;
    static const sc_lv<4> ap_const_lv4_6;
    static const sc_lv<4> ap_const_lv4_5;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<4> ap_const_lv4_3;
    static const sc_lv<4> ap_const_lv4_2;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<3> ap_const_lv3_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_0_V_address0();
    void thread_A_0_V_ce0();
    void thread_A_0_V_d0();
    void thread_A_0_V_we0();
    void thread_A_1_V_address0();
    void thread_A_1_V_ce0();
    void thread_A_1_V_d0();
    void thread_A_1_V_we0();
    void thread_A_2_V_address0();
    void thread_A_2_V_ce0();
    void thread_A_2_V_d0();
    void thread_A_2_V_we0();
    void thread_A_3_V_address0();
    void thread_A_3_V_ce0();
    void thread_A_3_V_d0();
    void thread_A_3_V_we0();
    void thread_A_4_V_address0();
    void thread_A_4_V_ce0();
    void thread_A_4_V_d0();
    void thread_A_4_V_we0();
    void thread_A_5_V_address0();
    void thread_A_5_V_ce0();
    void thread_A_5_V_d0();
    void thread_A_5_V_we0();
    void thread_A_6_V_address0();
    void thread_A_6_V_ce0();
    void thread_A_6_V_d0();
    void thread_A_6_V_we0();
    void thread_A_7_V_address0();
    void thread_A_7_V_ce0();
    void thread_A_7_V_d0();
    void thread_A_7_V_we0();
    void thread_A_8_V_address0();
    void thread_A_8_V_ce0();
    void thread_A_8_V_d0();
    void thread_A_8_V_we0();
    void thread_A_9_V_address0();
    void thread_A_9_V_ce0();
    void thread_A_9_V_d0();
    void thread_A_9_V_we0();
    void thread_add_ln203_fu_280_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_col_fu_270_p2();
    void thread_f_fu_234_p2();
    void thread_icmp_ln5_fu_228_p2();
    void thread_icmp_ln6_fu_240_p2();
    void thread_icmp_ln7_fu_264_p2();
    void thread_row_fu_246_p2();
    void thread_tmp_fu_252_p3();
    void thread_zext_ln203_5_fu_285_p1();
    void thread_zext_ln203_fu_276_p1();
    void thread_zext_ln7_fu_260_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
