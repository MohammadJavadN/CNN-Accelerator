// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_layer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        prediction_address0,
        prediction_ce0,
        prediction_we0,
        prediction_d0,
        flat_array_address0,
        flat_array_ce0,
        flat_array_q0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] prediction_address0;
output   prediction_ce0;
output   prediction_we0;
output  [31:0] prediction_d0;
output  [7:0] flat_array_address0;
output   flat_array_ce0;
input  [31:0] flat_array_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg prediction_ce0;
reg prediction_we0;
reg flat_array_ce0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] dense_weights_address0;
reg    dense_weights_ce0;
wire   [31:0] dense_weights_q0;
wire   [3:0] dense_biases_address0;
reg    dense_biases_ce0;
wire   [31:0] dense_biases_q0;
wire   [31:0] dense_array_q0;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state11;
wire   [3:0] add_ln12_fu_250_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] d_fu_273_p2;
reg   [3:0] d_reg_389;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln20_fu_279_p1;
reg   [63:0] zext_ln20_reg_394;
wire   [0:0] icmp_ln14_fu_267_p2;
wire   [11:0] zext_ln18_fu_283_p1;
reg   [11:0] zext_ln18_reg_400;
wire   [7:0] f_fu_293_p2;
reg   [7:0] f_reg_408;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln18_fu_287_p2;
wire   [31:0] grp_fu_217_p2;
wire    ap_CS_fsm_state5;
wire   [3:0] i_fu_350_p2;
reg   [3:0] i_reg_436;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln15_fu_344_p2;
wire    ap_CS_fsm_state9;
wire   [3:0] j_fu_367_p2;
reg   [3:0] j_reg_454;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln22_fu_373_p1;
reg   [63:0] zext_ln22_reg_459;
wire   [0:0] icmp_ln20_fu_361_p2;
wire   [31:0] grp_fu_238_p2;
reg   [31:0] tmp_2_i_reg_469;
wire    ap_CS_fsm_state12;
reg   [3:0] dense_array_address0;
reg    dense_array_ce0;
reg    dense_array_we0;
reg   [31:0] dense_array_d0;
reg   [3:0] phi_ln12_reg_138;
wire   [0:0] icmp_ln12_fu_261_p2;
reg   [3:0] d_0_reg_149;
wire    ap_CS_fsm_state6;
reg   [31:0] w_sum_0_reg_160;
reg   [7:0] f_0_reg_172;
reg   [31:0] sum_0_i_reg_183;
reg   [3:0] i_0_i_reg_195;
reg   [3:0] j_0_i_reg_206;
wire    ap_CS_fsm_state14;
wire   [63:0] zext_ln12_fu_256_p1;
wire   [63:0] zext_ln20_4_fu_339_p1;
wire   [63:0] zext_ln20_1_fu_299_p1;
wire   [63:0] zext_ln17_fu_356_p1;
wire   [31:0] grp_fu_232_p2;
reg   [31:0] grp_fu_217_p0;
reg   [31:0] grp_fu_217_p1;
wire   [31:0] tmp_9_fu_225_p2;
wire    ap_CS_fsm_state13;
wire   [10:0] tmp_s_fu_304_p3;
wire   [8:0] tmp_2_fu_316_p3;
wire   [11:0] zext_ln20_3_fu_324_p1;
wire   [11:0] zext_ln20_2_fu_312_p1;
wire   [11:0] add_ln20_fu_328_p2;
wire   [11:0] add_ln20_1_fu_334_p2;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

dense_layer_densedEe #(
    .DataWidth( 32 ),
    .AddressRange( 1600 ),
    .AddressWidth( 11 ))
dense_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_weights_address0),
    .ce0(dense_weights_ce0),
    .q0(dense_weights_q0)
);

dense_layer_denseeOg #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_biases_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_biases_address0),
    .ce0(dense_biases_ce0),
    .q0(dense_biases_q0)
);

dense_layer_densefYi #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_array_address0),
    .ce0(dense_array_ce0),
    .we0(dense_array_we0),
    .d0(dense_array_d0),
    .q0(dense_array_q0)
);

cnn_fadd_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32ncud_U33(
    .din0(grp_fu_217_p0),
    .din1(grp_fu_217_p1),
    .dout(grp_fu_217_p2)
);

cnn_fmul_32ns_32ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fmul_32ns_32ng8j_U34(
    .din0(dense_weights_q0),
    .din1(flat_array_q0),
    .dout(tmp_9_fu_225_p2)
);

cnn_fdiv_32ns_32nhbi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fdiv_32ns_32nhbi_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_2_i_reg_469),
    .din1(sum_0_i_reg_183),
    .ce(1'b1),
    .dout(grp_fu_232_p2)
);

cnn_fexp_32ns_32nibs #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fexp_32ns_32nibs_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dense_array_q0),
    .ce(1'b1),
    .dout(grp_fu_238_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln12_fu_261_p2 == 1'd1))) begin
        d_0_reg_149 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        d_0_reg_149 <= d_reg_389;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_172 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        f_0_reg_172 <= f_reg_408;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_267_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_i_reg_195 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_0_i_reg_195 <= i_reg_436;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln15_fu_344_p2 == 1'd1))) begin
        j_0_i_reg_206 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        j_0_i_reg_206 <= j_reg_454;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_261_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln12_reg_138 <= add_ln12_fu_250_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln12_reg_138 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_267_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        sum_0_i_reg_183 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        sum_0_i_reg_183 <= grp_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        w_sum_0_reg_160 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_sum_0_reg_160 <= grp_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        d_reg_389 <= d_fu_273_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_408 <= f_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_436 <= i_fu_350_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_reg_454 <= j_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_2_i_reg_469 <= grp_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln18_reg_400[3 : 0] <= zext_ln18_fu_283_p1[3 : 0];
        zext_ln20_reg_394[3 : 0] <= zext_ln20_fu_279_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_361_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        zext_ln22_reg_459[3 : 0] <= zext_ln22_fu_373_p1[3 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln20_fu_361_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln20_fu_361_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dense_array_address0 = zext_ln22_fu_373_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        dense_array_address0 = zext_ln17_fu_356_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dense_array_address0 = zext_ln20_reg_394;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dense_array_address0 = zext_ln12_fu_256_p1;
    end else begin
        dense_array_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        dense_array_ce0 = 1'b1;
    end else begin
        dense_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        dense_array_d0 = grp_fu_217_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dense_array_d0 = 32'd0;
    end else begin
        dense_array_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6))) begin
        dense_array_we0 = 1'b1;
    end else begin
        dense_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        dense_biases_ce0 = 1'b1;
    end else begin
        dense_biases_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        dense_weights_ce0 = 1'b1;
    end else begin
        dense_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        flat_array_ce0 = 1'b1;
    end else begin
        flat_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_217_p0 = sum_0_i_reg_183;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_217_p0 = w_sum_0_reg_160;
    end else begin
        grp_fu_217_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_217_p1 = grp_fu_238_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_217_p1 = dense_biases_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_217_p1 = tmp_9_fu_225_p2;
    end else begin
        grp_fu_217_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        prediction_ce0 = 1'b1;
    end else begin
        prediction_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        prediction_we0 = 1'b1;
    end else begin
        prediction_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln12_fu_261_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln14_fu_267_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln18_fu_287_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln15_fu_344_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln20_fu_361_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_fu_250_p2 = (phi_ln12_reg_138 + 4'd1);

assign add_ln20_1_fu_334_p2 = (add_ln20_fu_328_p2 + zext_ln18_reg_400);

assign add_ln20_fu_328_p2 = (zext_ln20_3_fu_324_p1 + zext_ln20_2_fu_312_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign d_fu_273_p2 = (d_0_reg_149 + 4'd1);

assign dense_biases_address0 = zext_ln20_reg_394;

assign dense_weights_address0 = zext_ln20_4_fu_339_p1;

assign f_fu_293_p2 = (f_0_reg_172 + 8'd1);

assign flat_array_address0 = zext_ln20_1_fu_299_p1;

assign i_fu_350_p2 = (i_0_i_reg_195 + 4'd1);

assign icmp_ln12_fu_261_p2 = ((phi_ln12_reg_138 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_267_p2 = ((d_0_reg_149 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_344_p2 = ((i_0_i_reg_195 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_287_p2 = ((f_0_reg_172 == 8'd160) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_361_p2 = ((j_0_i_reg_206 == 4'd10) ? 1'b1 : 1'b0);

assign j_fu_367_p2 = (j_0_i_reg_206 + 4'd1);

assign prediction_address0 = zext_ln22_reg_459;

assign prediction_d0 = grp_fu_232_p2;

assign tmp_2_fu_316_p3 = {{f_0_reg_172}, {1'd0}};

assign tmp_s_fu_304_p3 = {{f_0_reg_172}, {3'd0}};

assign zext_ln12_fu_256_p1 = phi_ln12_reg_138;

assign zext_ln17_fu_356_p1 = i_0_i_reg_195;

assign zext_ln18_fu_283_p1 = d_0_reg_149;

assign zext_ln20_1_fu_299_p1 = f_0_reg_172;

assign zext_ln20_2_fu_312_p1 = tmp_s_fu_304_p3;

assign zext_ln20_3_fu_324_p1 = tmp_2_fu_316_p3;

assign zext_ln20_4_fu_339_p1 = add_ln20_1_fu_334_p2;

assign zext_ln20_fu_279_p1 = d_0_reg_149;

assign zext_ln22_fu_373_p1 = j_0_i_reg_206;

always @ (posedge ap_clk) begin
    zext_ln20_reg_394[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_400[11:4] <= 8'b00000000;
    zext_ln22_reg_459[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //dense_layer
