-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity normalization is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    img_in_V_empty_n : IN STD_LOGIC;
    img_in_V_read : OUT STD_LOGIC;
    img_out_V_V_din : OUT STD_LOGIC_VECTOR (13 downto 0);
    img_out_V_V_full_n : IN STD_LOGIC;
    img_out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of normalization is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_406FE00000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000001101111111000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv12_FF8 : STD_LOGIC_VECTOR (11 downto 0) := "111111111000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_E : STD_LOGIC_VECTOR (11 downto 0) := "000000001110";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal img_in_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln19_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_out_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal r_fu_114_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_reg_408 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal c_fu_126_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_reg_416 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal grp_fu_99_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_426 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_103_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_assign_reg_431 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal man_V_4_fu_183_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_4_reg_436 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal sh_amt_fu_221_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_441 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln583_fu_235_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln583_reg_446 : STD_LOGIC_VECTOR (13 downto 0);
    signal and_ln603_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_reg_451 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_reg_456 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_4_fu_339_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln603_4_reg_461 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln603_4_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_4_reg_466 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_0_reg_77 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_0_reg_88 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln18_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ireg_V_fu_132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_147_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_161_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_2_fu_165_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_2_fu_173_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_s_fu_139_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_3_fu_177_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_fu_135_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_157_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_197_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_209_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_215_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_fu_251_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_2_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_259_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal and_ln582_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_3_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln581_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_362_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_366_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln581cast_fu_375_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln604_fu_379_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln586_fu_371_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln603_fu_384_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln603_5_fu_391_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_99_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);

    component cnn_fpext_32ns_64bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component cnn_ddiv_64ns_64ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    cnn_fpext_32ns_64bkb_U11 : component cnn_fpext_32ns_64bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => img_in_V_dout,
        ce => grp_fu_99_ce,
        dout => grp_fu_99_p1);

    cnn_ddiv_64ns_64ncud_U12 : component cnn_ddiv_64ns_64ncud
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_5_reg_426,
        din1 => ap_const_lv64_406FE00000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_103_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_108_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_reg_88 <= ap_const_lv5_0;
            elsif (((img_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                c_0_reg_88 <= c_reg_416;
            end if; 
        end if;
    end process;

    r_0_reg_77_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln19_fu_120_p2 = ap_const_lv1_0) and (img_in_V_empty_n = ap_const_logic_0))) and (icmp_ln19_fu_120_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_reg_77 <= r_reg_408;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_77 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                and_ln603_reg_451 <= and_ln603_fu_327_p2;
                man_V_4_reg_436 <= man_V_4_fu_183_p3;
                or_ln603_4_reg_466 <= or_ln603_4_fu_353_p2;
                or_ln603_reg_456 <= or_ln603_fu_333_p2;
                select_ln603_4_reg_461 <= select_ln603_4_fu_339_p3;
                sh_amt_reg_441 <= sh_amt_fu_221_p3;
                trunc_ln583_reg_446 <= trunc_ln583_fu_235_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln19_fu_120_p2 = ap_const_lv1_0) and (img_in_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                c_reg_416 <= c_fu_126_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_reg_408 <= r_fu_114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_5_reg_426 <= grp_fu_99_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                v_assign_reg_431 <= grp_fu_103_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, img_in_V_empty_n, img_out_V_V_full_n, ap_CS_fsm_state3, icmp_ln19_fu_120_p2, ap_CS_fsm_state28, ap_CS_fsm_state2, icmp_ln18_fu_108_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln18_fu_108_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((icmp_ln19_fu_120_p2 = ap_const_lv1_0) and (img_in_V_empty_n = ap_const_logic_0))) and (icmp_ln19_fu_120_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((icmp_ln19_fu_120_p2 = ap_const_lv1_0) and (img_in_V_empty_n = ap_const_logic_0))) and (icmp_ln19_fu_120_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((img_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_197_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_157_p1));
    add_ln581_fu_209_p2 <= std_logic_vector(signed(ap_const_lv12_FF8) + signed(F2_fu_197_p2));
    and_ln581_fu_291_p2 <= (xor_ln582_fu_285_p2 and icmp_ln581_fu_203_p2);
    and_ln582_fu_273_p2 <= (xor_ln571_fu_267_p2 and icmp_ln582_fu_229_p2);
    and_ln585_2_fu_309_p2 <= (icmp_ln585_fu_239_p2 and and_ln581_fu_291_p2);
    and_ln585_fu_303_p2 <= (xor_ln585_fu_297_p2 and and_ln581_fu_291_p2);
    and_ln603_fu_327_p2 <= (xor_ln581_fu_321_p2 and icmp_ln603_fu_245_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state3_assign_proc : process(img_in_V_empty_n, icmp_ln19_fu_120_p2)
    begin
                ap_block_state3 <= ((icmp_ln19_fu_120_p2 = ap_const_lv1_0) and (img_in_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln18_fu_108_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln18_fu_108_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln18_fu_108_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln18_fu_108_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_fu_366_p2 <= std_logic_vector(shift_right(signed(man_V_4_reg_436),to_integer(unsigned('0' & zext_ln586_fu_362_p1(31-1 downto 0)))));
    c_fu_126_p2 <= std_logic_vector(unsigned(c_0_reg_88) + unsigned(ap_const_lv5_1));
    exp_tmp_V_fu_147_p4 <= ireg_V_fu_132_p1(62 downto 52);

    grp_fu_99_ce_assign_proc : process(img_in_V_empty_n, ap_CS_fsm_state3, icmp_ln19_fu_120_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (not(((icmp_ln19_fu_120_p2 = ap_const_lv1_0) and (img_in_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            grp_fu_99_ce <= ap_const_logic_1;
        else 
            grp_fu_99_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln18_fu_108_p2 <= "1" when (r_0_reg_77 = ap_const_lv5_1C) else "0";
    icmp_ln19_fu_120_p2 <= "1" when (c_0_reg_88 = ap_const_lv5_1C) else "0";
    icmp_ln571_fu_191_p2 <= "1" when (trunc_ln556_fu_135_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_203_p2 <= "1" when (signed(F2_fu_197_p2) > signed(ap_const_lv12_8)) else "0";
    icmp_ln582_fu_229_p2 <= "1" when (F2_fu_197_p2 = ap_const_lv12_8) else "0";
    icmp_ln585_fu_239_p2 <= "1" when (unsigned(sh_amt_fu_221_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_245_p2 <= "1" when (unsigned(sh_amt_fu_221_p3) < unsigned(ap_const_lv12_E)) else "0";

    img_in_V_blk_n_assign_proc : process(img_in_V_empty_n, ap_CS_fsm_state3, icmp_ln19_fu_120_p2)
    begin
        if (((icmp_ln19_fu_120_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            img_in_V_blk_n <= img_in_V_empty_n;
        else 
            img_in_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_in_V_read_assign_proc : process(img_in_V_empty_n, ap_CS_fsm_state3, icmp_ln19_fu_120_p2)
    begin
        if ((not(((icmp_ln19_fu_120_p2 = ap_const_lv1_0) and (img_in_V_empty_n = ap_const_logic_0))) and (icmp_ln19_fu_120_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            img_in_V_read <= ap_const_logic_1;
        else 
            img_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_out_V_V_blk_n_assign_proc : process(img_out_V_V_full_n, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            img_out_V_V_blk_n <= img_out_V_V_full_n;
        else 
            img_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_out_V_V_din <= 
        select_ln603_5_fu_391_p3 when (or_ln603_4_reg_466(0) = '1') else 
        ap_const_lv14_0;

    img_out_V_V_write_assign_proc : process(img_out_V_V_full_n, ap_CS_fsm_state28)
    begin
        if (((img_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            img_out_V_V_write <= ap_const_logic_1;
        else 
            img_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    ireg_V_fu_132_p1 <= v_assign_reg_431;
    man_V_3_fu_177_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_2_fu_173_p1));
    man_V_4_fu_183_p3 <= 
        man_V_3_fu_177_p2 when (p_Result_s_fu_139_p3(0) = '1') else 
        p_Result_2_fu_173_p1;
    or_ln581_fu_315_p2 <= (or_ln582_fu_279_p2 or icmp_ln581_fu_203_p2);
    or_ln582_fu_279_p2 <= (icmp_ln582_fu_229_p2 or icmp_ln571_fu_191_p2);
    or_ln603_3_fu_347_p2 <= (and_ln585_fu_303_p2 or and_ln582_fu_273_p2);
    or_ln603_4_fu_353_p2 <= (or_ln603_fu_333_p2 or or_ln603_3_fu_347_p2);
    or_ln603_fu_333_p2 <= (and_ln603_fu_327_p2 or and_ln585_2_fu_309_p2);
    p_Result_2_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_165_p3),54));
    p_Result_s_fu_139_p3 <= ireg_V_fu_132_p1(63 downto 63);
    r_fu_114_p2 <= std_logic_vector(unsigned(r_0_reg_77) + unsigned(ap_const_lv5_1));
    select_ln588_fu_259_p3 <= 
        ap_const_lv14_3FFF when (tmp_7_fu_251_p3(0) = '1') else 
        ap_const_lv14_0;
    select_ln603_4_fu_339_p3 <= 
        select_ln588_fu_259_p3 when (and_ln585_fu_303_p2(0) = '1') else 
        trunc_ln583_fu_235_p1;
    select_ln603_5_fu_391_p3 <= 
        select_ln603_fu_384_p3 when (or_ln603_reg_456(0) = '1') else 
        select_ln603_4_reg_461;
    select_ln603_fu_384_p3 <= 
        shl_ln604_fu_379_p2 when (and_ln603_reg_451(0) = '1') else 
        trunc_ln586_fu_371_p1;
        sext_ln581_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_441),32));

    sext_ln581cast_fu_375_p1 <= sext_ln581_fu_359_p1(14 - 1 downto 0);
    sh_amt_fu_221_p3 <= 
        add_ln581_fu_209_p2 when (icmp_ln581_fu_203_p2(0) = '1') else 
        sub_ln581_fu_215_p2;
    shl_ln604_fu_379_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_446),to_integer(unsigned('0' & sext_ln581cast_fu_375_p1(14-1 downto 0)))));
    sub_ln581_fu_215_p2 <= std_logic_vector(unsigned(ap_const_lv12_8) - unsigned(F2_fu_197_p2));
    tmp_2_fu_165_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_161_p1);
    tmp_7_fu_251_p3 <= ireg_V_fu_132_p1(63 downto 63);
    trunc_ln556_fu_135_p1 <= ireg_V_fu_132_p1(63 - 1 downto 0);
    trunc_ln565_fu_161_p1 <= ireg_V_fu_132_p1(52 - 1 downto 0);
    trunc_ln583_fu_235_p1 <= man_V_4_fu_183_p3(14 - 1 downto 0);
    trunc_ln586_fu_371_p1 <= ashr_ln586_fu_366_p2(14 - 1 downto 0);
    xor_ln571_fu_267_p2 <= (icmp_ln571_fu_191_p2 xor ap_const_lv1_1);
    xor_ln581_fu_321_p2 <= (or_ln581_fu_315_p2 xor ap_const_lv1_1);
    xor_ln582_fu_285_p2 <= (or_ln582_fu_279_p2 xor ap_const_lv1_1);
    xor_ln585_fu_297_p2 <= (icmp_ln585_fu_239_p2 xor ap_const_lv1_1);
    zext_ln461_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_147_p4),12));
    zext_ln586_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_359_p1),54));
end behav;
