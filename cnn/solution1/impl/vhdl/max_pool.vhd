-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    feature_0_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    feature_0_V_ce0 : OUT STD_LOGIC;
    feature_0_V_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
    feature_1_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    feature_1_V_ce0 : OUT STD_LOGIC;
    feature_1_V_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
    feature_2_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    feature_2_V_ce0 : OUT STD_LOGIC;
    feature_2_V_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
    feature_3_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    feature_3_V_ce0 : OUT STD_LOGIC;
    feature_3_V_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
    feature_4_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    feature_4_V_ce0 : OUT STD_LOGIC;
    feature_4_V_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
    feature_5_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    feature_5_V_ce0 : OUT STD_LOGIC;
    feature_5_V_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
    feature_V_offset : IN STD_LOGIC_VECTOR (2 downto 0);
    pool_feature_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    pool_feature_V_ce0 : OUT STD_LOGIC;
    pool_feature_V_we0 : OUT STD_LOGIC;
    pool_feature_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of max_pool is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sext_ln203_fu_262_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln203_reg_512 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln203_1_fu_311_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln203_1_reg_520 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln40_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_323_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln42_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pr_fu_339_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal pr_reg_536 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln1494_fu_375_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1494_reg_541 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln46_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_405_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal pc_fu_421_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal pc_reg_554 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln47_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln49_fu_499_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal r_0_reg_161 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_0_reg_173 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_0_reg_185 : STD_LOGIC_VECTOR (13 downto 0);
    signal pr_0_reg_198 : STD_LOGIC_VECTOR (1 downto 0);
    signal pool_1_reg_209 : STD_LOGIC_VECTOR (13 downto 0);
    signal pc_0_reg_221 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln203_4_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1494_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_232_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_244_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln203_fu_240_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln203_1_fu_252_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln203_fu_256_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_272_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln203_2_fu_282_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln203_fu_286_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln203_fu_291_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_fu_295_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_303_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln46_fu_329_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln49_fu_345_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_fu_351_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_363_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1494_fu_359_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1494_2_fu_371_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_381_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln203_3_fu_391_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln203_1_fu_395_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln47_fu_411_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln49_1_fu_427_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1494_3_fu_433_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1494_fu_437_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal pool_V_fu_476_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal pool_V_fu_476_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal pool_V_fu_476_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal pool_V_fu_476_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal pool_V_fu_476_p5 : STD_LOGIC_VECTOR (13 downto 0);
    signal pool_V_fu_476_p6 : STD_LOGIC_VECTOR (13 downto 0);
    signal pool_V_fu_476_p8 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln1494_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component cnn_mux_63_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        din3 : IN STD_LOGIC_VECTOR (13 downto 0);
        din4 : IN STD_LOGIC_VECTOR (13 downto 0);
        din5 : IN STD_LOGIC_VECTOR (13 downto 0);
        din6 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    cnn_mux_63_14_1_1_U17 : component cnn_mux_63_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        din3_WIDTH => 14,
        din4_WIDTH => 14,
        din5_WIDTH => 14,
        din6_WIDTH => 3,
        dout_WIDTH => 14)
    port map (
        din0 => pool_V_fu_476_p1,
        din1 => pool_V_fu_476_p2,
        din2 => pool_V_fu_476_p3,
        din3 => pool_V_fu_476_p4,
        din4 => pool_V_fu_476_p5,
        din5 => pool_V_fu_476_p6,
        din6 => feature_V_offset,
        dout => pool_V_fu_476_p8);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_266_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_reg_173 <= ap_const_lv5_0;
            elsif (((icmp_ln46_fu_333_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c_0_reg_173 <= c_fu_405_p2;
            end if; 
        end if;
    end process;

    pc_0_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                pc_0_reg_221 <= pc_reg_554;
            elsif (((icmp_ln46_fu_333_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                pc_0_reg_221 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    pool_0_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_fu_317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                pool_0_reg_185 <= ap_const_lv14_0;
            elsif (((icmp_ln47_fu_415_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                pool_0_reg_185 <= pool_1_reg_209;
            end if; 
        end if;
    end process;

    pool_1_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                pool_1_reg_209 <= select_ln49_fu_499_p3;
            elsif (((icmp_ln46_fu_333_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                pool_1_reg_209 <= pool_0_reg_185;
            end if; 
        end if;
    end process;

    pr_0_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_fu_317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                pr_0_reg_198 <= ap_const_lv2_0;
            elsif (((icmp_ln47_fu_415_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                pr_0_reg_198 <= pr_reg_536;
            end if; 
        end if;
    end process;

    r_0_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_fu_317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_reg_161 <= r_fu_323_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_161 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                pc_reg_554 <= pc_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                pr_reg_536 <= pr_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    sext_ln203_reg_512(8 downto 2) <= sext_ln203_fu_262_p1(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_fu_333_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    sub_ln1494_reg_541(10 downto 3) <= sub_ln1494_fu_375_p2(10 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_266_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sub_ln203_1_reg_520(10 downto 2) <= sub_ln203_1_fu_311_p2(10 downto 2);
            end if;
        end if;
    end process;
    sext_ln203_reg_512(1 downto 0) <= "00";
    sub_ln203_1_reg_520(1 downto 0) <= "00";
    sub_ln1494_reg_541(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln40_fu_266_p2, ap_CS_fsm_state3, icmp_ln42_fu_317_p2, ap_CS_fsm_state4, icmp_ln46_fu_333_p2, ap_CS_fsm_state5, icmp_ln47_fu_415_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln40_fu_266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln42_fu_317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln46_fu_333_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln47_fu_415_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln1494_fu_437_p2 <= std_logic_vector(unsigned(sub_ln1494_reg_541) + unsigned(zext_ln1494_3_fu_433_p1));
    add_ln203_1_fu_395_p2 <= std_logic_vector(unsigned(sub_ln203_1_reg_520) + unsigned(zext_ln203_3_fu_391_p1));
    add_ln203_fu_286_p2 <= std_logic_vector(unsigned(zext_ln203_2_fu_282_p1) + unsigned(sext_ln203_reg_512));
    add_ln49_1_fu_427_p2 <= std_logic_vector(unsigned(zext_ln47_fu_411_p1) + unsigned(c_0_reg_173));
    add_ln49_fu_345_p2 <= std_logic_vector(unsigned(zext_ln46_fu_329_p1) + unsigned(r_0_reg_161));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln40_fu_266_p2)
    begin
        if ((((icmp_ln40_fu_266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln40_fu_266_p2)
    begin
        if (((icmp_ln40_fu_266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_405_p2 <= std_logic_vector(unsigned(c_0_reg_173) + unsigned(ap_const_lv5_2));
    feature_0_V_address0 <= sext_ln1494_fu_442_p1(10 - 1 downto 0);

    feature_0_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            feature_0_V_ce0 <= ap_const_logic_1;
        else 
            feature_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    feature_1_V_address0 <= sext_ln1494_fu_442_p1(10 - 1 downto 0);

    feature_1_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            feature_1_V_ce0 <= ap_const_logic_1;
        else 
            feature_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    feature_2_V_address0 <= sext_ln1494_fu_442_p1(10 - 1 downto 0);

    feature_2_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            feature_2_V_ce0 <= ap_const_logic_1;
        else 
            feature_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    feature_3_V_address0 <= sext_ln1494_fu_442_p1(10 - 1 downto 0);

    feature_3_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            feature_3_V_ce0 <= ap_const_logic_1;
        else 
            feature_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    feature_4_V_address0 <= sext_ln1494_fu_442_p1(10 - 1 downto 0);

    feature_4_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            feature_4_V_ce0 <= ap_const_logic_1;
        else 
            feature_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    feature_5_V_address0 <= sext_ln1494_fu_442_p1(10 - 1 downto 0);

    feature_5_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            feature_5_V_ce0 <= ap_const_logic_1;
        else 
            feature_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1494_fu_493_p2 <= "1" when (signed(pool_V_fu_476_p8) > signed(pool_1_reg_209)) else "0";
    icmp_ln40_fu_266_p2 <= "1" when (unsigned(r_0_reg_161) < unsigned(ap_const_lv5_18)) else "0";
    icmp_ln42_fu_317_p2 <= "1" when (unsigned(c_0_reg_173) < unsigned(ap_const_lv5_18)) else "0";
    icmp_ln46_fu_333_p2 <= "1" when (pr_0_reg_198 = ap_const_lv2_2) else "0";
    icmp_ln47_fu_415_p2 <= "1" when (pc_0_reg_221 = ap_const_lv2_2) else "0";
    p_shl2_cast_fu_295_p3 <= (trunc_ln203_fu_291_p1 & ap_const_lv4_0);
    p_shl3_cast_fu_303_p3 <= (add_ln203_fu_286_p2 & ap_const_lv2_0);
    pc_fu_421_p2 <= std_logic_vector(unsigned(pc_0_reg_221) + unsigned(ap_const_lv2_1));
    pool_V_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(feature_0_V_q0),14));
    pool_V_fu_476_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(feature_1_V_q0),14));
    pool_V_fu_476_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(feature_2_V_q0),14));
    pool_V_fu_476_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(feature_3_V_q0),14));
    pool_V_fu_476_p5 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(feature_4_V_q0),14));
    pool_V_fu_476_p6 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(feature_5_V_q0),14));
    pool_feature_V_address0 <= zext_ln203_4_fu_400_p1(10 - 1 downto 0);

    pool_feature_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pool_feature_V_ce0 <= ap_const_logic_1;
        else 
            pool_feature_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pool_feature_V_d0 <= pool_0_reg_185;

    pool_feature_V_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln46_fu_333_p2)
    begin
        if (((icmp_ln46_fu_333_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            pool_feature_V_we0 <= ap_const_logic_1;
        else 
            pool_feature_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pr_fu_339_p2 <= std_logic_vector(unsigned(pr_0_reg_198) + unsigned(ap_const_lv2_1));
    r_fu_323_p2 <= std_logic_vector(unsigned(r_0_reg_161) + unsigned(ap_const_lv5_2));
    select_ln49_fu_499_p3 <= 
        pool_V_fu_476_p8 when (icmp_ln1494_fu_493_p2(0) = '1') else 
        pool_1_reg_209;
        sext_ln1494_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1494_fu_437_p2),64));

        sext_ln203_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln203_fu_256_p2),9));

    sub_ln1494_fu_375_p2 <= std_logic_vector(unsigned(zext_ln1494_fu_359_p1) - unsigned(zext_ln1494_2_fu_371_p1));
    sub_ln203_1_fu_311_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_295_p3) - unsigned(p_shl3_cast_fu_303_p3));
    sub_ln203_fu_256_p2 <= std_logic_vector(unsigned(zext_ln203_fu_240_p1) - unsigned(zext_ln203_1_fu_252_p1));
    tmp_10_fu_272_p4 <= r_0_reg_161(4 downto 1);
    tmp_11_fu_381_p4 <= c_0_reg_173(4 downto 1);
    tmp_3_fu_244_p3 <= (feature_V_offset & ap_const_lv2_0);
    tmp_6_fu_351_p3 <= (add_ln49_fu_345_p2 & ap_const_lv5_0);
    tmp_7_fu_363_p3 <= (add_ln49_fu_345_p2 & ap_const_lv3_0);
    tmp_fu_232_p3 <= (feature_V_offset & ap_const_lv4_0);
    trunc_ln203_fu_291_p1 <= add_ln203_fu_286_p2(7 - 1 downto 0);
    zext_ln1494_2_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_363_p3),11));
    zext_ln1494_3_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_1_fu_427_p2),11));
    zext_ln1494_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_351_p3),11));
    zext_ln203_1_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_244_p3),8));
    zext_ln203_2_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_272_p4),9));
    zext_ln203_3_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_381_p4),11));
    zext_ln203_4_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_1_fu_395_p2),64));
    zext_ln203_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_232_p3),8));
    zext_ln46_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pr_0_reg_198),5));
    zext_ln47_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pc_0_reg_221),5));
end behav;
