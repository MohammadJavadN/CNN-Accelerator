-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    feature_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    feature_0_ce0 : OUT STD_LOGIC;
    feature_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    feature_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    feature_1_ce0 : OUT STD_LOGIC;
    feature_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    feature_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    feature_2_ce0 : OUT STD_LOGIC;
    feature_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    feature_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    feature_3_ce0 : OUT STD_LOGIC;
    feature_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    feature_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    feature_4_ce0 : OUT STD_LOGIC;
    feature_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    feature_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    feature_5_ce0 : OUT STD_LOGIC;
    feature_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    feature_offset : IN STD_LOGIC_VECTOR (2 downto 0);
    pool_feature_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    pool_feature_ce0 : OUT STD_LOGIC;
    pool_feature_we0 : OUT STD_LOGIC;
    pool_feature_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sext_ln55_fu_277_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln55_reg_582 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln55_1_fu_326_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln55_1_reg_590 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln42_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_338_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln44_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pr_fu_354_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal pr_reg_606 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln51_fu_390_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln51_reg_611 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln48_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_420_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal pc_fu_436_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal pc_reg_624 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln49_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool_3_fu_569_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal r_0_reg_171 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_0_reg_183 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_0_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal pr_0_reg_208 : STD_LOGIC_VECTOR (1 downto 0);
    signal pool_1_reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal pc_0_reg_231 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln55_4_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln51_fu_457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal pool_fu_467_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_247_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_259_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln55_fu_255_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln55_1_fu_267_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln55_fu_271_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_287_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln55_2_fu_297_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln55_fu_301_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln55_fu_306_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_fu_310_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_318_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln48_fu_344_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln51_fu_360_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_366_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_378_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln51_fu_374_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln51_1_fu_386_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_396_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln55_3_fu_406_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln55_1_fu_410_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln49_fu_426_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln51_1_fu_442_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln51_2_fu_448_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln51_2_fu_452_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln51_fu_485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln51_1_fu_503_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_489_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln51_fu_499_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln51_1_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_507_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln51_1_fu_517_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln51_3_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_2_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_1_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln51_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln51_1_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component cnn_fcmp_32ns_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_mux_63_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    cnn_fcmp_32ns_32nbkb_U1 : component cnn_fcmp_32ns_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => pool_fu_467_p8,
        din1 => pool_1_reg_219,
        opcode => ap_const_lv5_2,
        dout => tmp_8_fu_242_p2);

    cnn_mux_63_32_1_1_U2 : component cnn_mux_63_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => feature_0_q0,
        din1 => feature_1_q0,
        din2 => feature_2_q0,
        din3 => feature_3_q0,
        din4 => feature_4_q0,
        din5 => feature_5_q0,
        din6 => feature_offset,
        dout => pool_fu_467_p8);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_fu_281_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_reg_183 <= ap_const_lv5_0;
            elsif (((icmp_ln48_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c_0_reg_183 <= c_fu_420_p2;
            end if; 
        end if;
    end process;

    pc_0_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                pc_0_reg_231 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                pc_0_reg_231 <= pc_reg_624;
            end if; 
        end if;
    end process;

    pool_0_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln44_fu_332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                pool_0_reg_195 <= ap_const_lv32_800000;
            elsif (((icmp_ln49_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                pool_0_reg_195 <= pool_1_reg_219;
            end if; 
        end if;
    end process;

    pool_1_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                pool_1_reg_219 <= pool_0_reg_195;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                pool_1_reg_219 <= pool_3_fu_569_p3;
            end if; 
        end if;
    end process;

    pr_0_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln44_fu_332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                pr_0_reg_208 <= ap_const_lv2_0;
            elsif (((icmp_ln49_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                pr_0_reg_208 <= pr_reg_606;
            end if; 
        end if;
    end process;

    r_0_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln44_fu_332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_reg_171 <= r_fu_338_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_171 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                pc_reg_624 <= pc_fu_436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                pr_reg_606 <= pr_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    sext_ln55_reg_582(8 downto 2) <= sext_ln55_fu_277_p1(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    sub_ln51_reg_611(10 downto 3) <= sub_ln51_fu_390_p2(10 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_fu_281_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sub_ln55_1_reg_590(10 downto 2) <= sub_ln55_1_fu_326_p2(10 downto 2);
            end if;
        end if;
    end process;
    sext_ln55_reg_582(1 downto 0) <= "00";
    sub_ln55_1_reg_590(1 downto 0) <= "00";
    sub_ln51_reg_611(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln42_fu_281_p2, ap_CS_fsm_state3, icmp_ln44_fu_332_p2, ap_CS_fsm_state4, icmp_ln48_fu_348_p2, ap_CS_fsm_state5, icmp_ln49_fu_430_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln42_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln44_fu_332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln48_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln49_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln51_1_fu_442_p2 <= std_logic_vector(unsigned(zext_ln49_fu_426_p1) + unsigned(c_0_reg_183));
    add_ln51_2_fu_452_p2 <= std_logic_vector(unsigned(sub_ln51_reg_611) + unsigned(zext_ln51_2_fu_448_p1));
    add_ln51_fu_360_p2 <= std_logic_vector(unsigned(zext_ln48_fu_344_p1) + unsigned(r_0_reg_171));
    add_ln55_1_fu_410_p2 <= std_logic_vector(unsigned(sub_ln55_1_reg_590) + unsigned(zext_ln55_3_fu_406_p1));
    add_ln55_fu_301_p2 <= std_logic_vector(unsigned(zext_ln55_2_fu_297_p1) + unsigned(sext_ln55_reg_582));
    and_ln51_1_fu_563_p2 <= (tmp_8_fu_242_p2 and and_ln51_fu_557_p2);
    and_ln51_fu_557_p2 <= (or_ln51_fu_533_p2 and or_ln51_1_fu_551_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln42_fu_281_p2)
    begin
        if ((((icmp_ln42_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln42_fu_281_p2)
    begin
        if (((icmp_ln42_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln51_1_fu_503_p1 <= pool_1_reg_219;
    bitcast_ln51_fu_485_p1 <= pool_fu_467_p8;
    c_fu_420_p2 <= std_logic_vector(unsigned(c_0_reg_183) + unsigned(ap_const_lv5_2));
    feature_0_address0 <= sext_ln51_fu_457_p1(10 - 1 downto 0);

    feature_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            feature_0_ce0 <= ap_const_logic_1;
        else 
            feature_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    feature_1_address0 <= sext_ln51_fu_457_p1(10 - 1 downto 0);

    feature_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            feature_1_ce0 <= ap_const_logic_1;
        else 
            feature_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    feature_2_address0 <= sext_ln51_fu_457_p1(10 - 1 downto 0);

    feature_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            feature_2_ce0 <= ap_const_logic_1;
        else 
            feature_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    feature_3_address0 <= sext_ln51_fu_457_p1(10 - 1 downto 0);

    feature_3_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            feature_3_ce0 <= ap_const_logic_1;
        else 
            feature_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    feature_4_address0 <= sext_ln51_fu_457_p1(10 - 1 downto 0);

    feature_4_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            feature_4_ce0 <= ap_const_logic_1;
        else 
            feature_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    feature_5_address0 <= sext_ln51_fu_457_p1(10 - 1 downto 0);

    feature_5_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            feature_5_ce0 <= ap_const_logic_1;
        else 
            feature_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln42_fu_281_p2 <= "1" when (unsigned(r_0_reg_171) < unsigned(ap_const_lv5_18)) else "0";
    icmp_ln44_fu_332_p2 <= "1" when (unsigned(c_0_reg_183) < unsigned(ap_const_lv5_18)) else "0";
    icmp_ln48_fu_348_p2 <= "1" when (pr_0_reg_208 = ap_const_lv2_2) else "0";
    icmp_ln49_fu_430_p2 <= "1" when (pc_0_reg_231 = ap_const_lv2_2) else "0";
    icmp_ln51_1_fu_527_p2 <= "1" when (trunc_ln51_fu_499_p1 = ap_const_lv23_0) else "0";
    icmp_ln51_2_fu_539_p2 <= "0" when (tmp_7_fu_507_p4 = ap_const_lv8_FF) else "1";
    icmp_ln51_3_fu_545_p2 <= "1" when (trunc_ln51_1_fu_517_p1 = ap_const_lv23_0) else "0";
    icmp_ln51_fu_521_p2 <= "0" when (tmp_6_fu_489_p4 = ap_const_lv8_FF) else "1";
    or_ln51_1_fu_551_p2 <= (icmp_ln51_3_fu_545_p2 or icmp_ln51_2_fu_539_p2);
    or_ln51_fu_533_p2 <= (icmp_ln51_fu_521_p2 or icmp_ln51_1_fu_527_p2);
    p_shl2_cast_fu_310_p3 <= (trunc_ln55_fu_306_p1 & ap_const_lv4_0);
    p_shl3_cast_fu_318_p3 <= (add_ln55_fu_301_p2 & ap_const_lv2_0);
    pc_fu_436_p2 <= std_logic_vector(unsigned(pc_0_reg_231) + unsigned(ap_const_lv2_1));
    pool_3_fu_569_p3 <= 
        pool_fu_467_p8 when (and_ln51_1_fu_563_p2(0) = '1') else 
        pool_1_reg_219;
    pool_feature_address0 <= zext_ln55_4_fu_415_p1(10 - 1 downto 0);

    pool_feature_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pool_feature_ce0 <= ap_const_logic_1;
        else 
            pool_feature_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pool_feature_d0 <= pool_0_reg_195;

    pool_feature_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln48_fu_348_p2)
    begin
        if (((icmp_ln48_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            pool_feature_we0 <= ap_const_logic_1;
        else 
            pool_feature_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pr_fu_354_p2 <= std_logic_vector(unsigned(pr_0_reg_208) + unsigned(ap_const_lv2_1));
    r_fu_338_p2 <= std_logic_vector(unsigned(r_0_reg_171) + unsigned(ap_const_lv5_2));
        sext_ln51_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln51_2_fu_452_p2),64));

        sext_ln55_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln55_fu_271_p2),9));

    sub_ln51_fu_390_p2 <= std_logic_vector(unsigned(zext_ln51_fu_374_p1) - unsigned(zext_ln51_1_fu_386_p1));
    sub_ln55_1_fu_326_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_310_p3) - unsigned(p_shl3_cast_fu_318_p3));
    sub_ln55_fu_271_p2 <= std_logic_vector(unsigned(zext_ln55_fu_255_p1) - unsigned(zext_ln55_1_fu_267_p1));
    tmp_10_fu_287_p4 <= r_0_reg_171(4 downto 1);
    tmp_11_fu_396_p4 <= c_0_reg_183(4 downto 1);
    tmp_1_fu_378_p3 <= (add_ln51_fu_360_p2 & ap_const_lv3_0);
    tmp_6_fu_489_p4 <= bitcast_ln51_fu_485_p1(30 downto 23);
    tmp_7_fu_507_p4 <= bitcast_ln51_1_fu_503_p1(30 downto 23);
    tmp_9_fu_259_p3 <= (feature_offset & ap_const_lv2_0);
    tmp_fu_247_p3 <= (feature_offset & ap_const_lv4_0);
    tmp_s_fu_366_p3 <= (add_ln51_fu_360_p2 & ap_const_lv5_0);
    trunc_ln51_1_fu_517_p1 <= bitcast_ln51_1_fu_503_p1(23 - 1 downto 0);
    trunc_ln51_fu_499_p1 <= bitcast_ln51_fu_485_p1(23 - 1 downto 0);
    trunc_ln55_fu_306_p1 <= add_ln55_fu_301_p2(7 - 1 downto 0);
    zext_ln48_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pr_0_reg_208),5));
    zext_ln49_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pc_0_reg_231),5));
    zext_ln51_1_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_378_p3),11));
    zext_ln51_2_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln51_1_fu_442_p2),11));
    zext_ln51_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_366_p3),11));
    zext_ln55_1_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_259_p3),8));
    zext_ln55_2_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_287_p4),9));
    zext_ln55_3_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_396_p4),11));
    zext_ln55_4_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln55_1_fu_410_p2),64));
    zext_ln55_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_247_p3),8));
end behav;
