// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module soft_max (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dense_array_address0,
        dense_array_ce0,
        dense_array_q0,
        pred_V_address0,
        pred_V_ce0,
        pred_V_we0,
        pred_V_d0
);

parameter    ap_ST_fsm_state1 = 36'd1;
parameter    ap_ST_fsm_state2 = 36'd2;
parameter    ap_ST_fsm_state3 = 36'd4;
parameter    ap_ST_fsm_state4 = 36'd8;
parameter    ap_ST_fsm_state5 = 36'd16;
parameter    ap_ST_fsm_state6 = 36'd32;
parameter    ap_ST_fsm_state7 = 36'd64;
parameter    ap_ST_fsm_state8 = 36'd128;
parameter    ap_ST_fsm_state9 = 36'd256;
parameter    ap_ST_fsm_state10 = 36'd512;
parameter    ap_ST_fsm_state11 = 36'd1024;
parameter    ap_ST_fsm_state12 = 36'd2048;
parameter    ap_ST_fsm_state13 = 36'd4096;
parameter    ap_ST_fsm_state14 = 36'd8192;
parameter    ap_ST_fsm_state15 = 36'd16384;
parameter    ap_ST_fsm_state16 = 36'd32768;
parameter    ap_ST_fsm_state17 = 36'd65536;
parameter    ap_ST_fsm_state18 = 36'd131072;
parameter    ap_ST_fsm_state19 = 36'd262144;
parameter    ap_ST_fsm_state20 = 36'd524288;
parameter    ap_ST_fsm_state21 = 36'd1048576;
parameter    ap_ST_fsm_state22 = 36'd2097152;
parameter    ap_ST_fsm_state23 = 36'd4194304;
parameter    ap_ST_fsm_state24 = 36'd8388608;
parameter    ap_ST_fsm_state25 = 36'd16777216;
parameter    ap_ST_fsm_state26 = 36'd33554432;
parameter    ap_ST_fsm_state27 = 36'd67108864;
parameter    ap_ST_fsm_state28 = 36'd134217728;
parameter    ap_ST_fsm_state29 = 36'd268435456;
parameter    ap_ST_fsm_state30 = 36'd536870912;
parameter    ap_ST_fsm_state31 = 36'd1073741824;
parameter    ap_ST_fsm_state32 = 36'd2147483648;
parameter    ap_ST_fsm_state33 = 36'd4294967296;
parameter    ap_ST_fsm_state34 = 36'd8589934592;
parameter    ap_ST_fsm_state35 = 36'd17179869184;
parameter    ap_ST_fsm_state36 = 36'd34359738368;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] dense_array_address0;
output   dense_array_ce0;
input  [31:0] dense_array_q0;
output  [3:0] pred_V_address0;
output   pred_V_ce0;
output   pred_V_we0;
output  [13:0] pred_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] dense_array_address0;
reg dense_array_ce0;
reg pred_V_ce0;
reg pred_V_we0;

(* fsm_encoding = "none" *) reg   [35:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state16;
wire   [31:0] grp_fu_137_p2;
reg   [31:0] reg_148;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state23;
wire   [3:0] i_fu_160_p2;
reg   [3:0] i_reg_464;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln15_fu_154_p2;
wire   [31:0] grp_fu_124_p2;
wire    ap_CS_fsm_state14;
wire   [3:0] j_fu_177_p2;
reg   [3:0] j_reg_482;
wire    ap_CS_fsm_state15;
wire   [63:0] zext_ln22_fu_183_p1;
reg   [63:0] zext_ln22_reg_487;
wire   [0:0] icmp_ln20_fu_171_p2;
wire   [31:0] grp_fu_129_p2;
reg   [31:0] v_assign_reg_497;
wire    ap_CS_fsm_state33;
reg   [0:0] p_Result_s_reg_503;
wire    ap_CS_fsm_state35;
wire   [51:0] trunc_ln565_fu_218_p1;
reg   [51:0] trunc_ln565_reg_508;
wire   [0:0] icmp_ln571_fu_222_p2;
reg   [0:0] icmp_ln571_reg_513;
wire   [0:0] icmp_ln581_fu_234_p2;
reg   [0:0] icmp_ln581_reg_519;
wire  signed [11:0] sh_amt_fu_252_p3;
reg  signed [11:0] sh_amt_reg_525;
wire   [0:0] icmp_ln582_fu_260_p2;
reg   [0:0] icmp_ln582_reg_532;
reg   [31:0] sum_0_reg_90;
reg   [3:0] i_0_reg_102;
reg   [3:0] j_0_reg_113;
wire    ap_CS_fsm_state36;
wire   [63:0] zext_ln17_fu_166_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state34;
wire   [63:0] grp_fu_134_p1;
wire   [63:0] ireg_V_fu_188_p1;
wire   [10:0] exp_tmp_V_fu_204_p4;
wire   [62:0] trunc_ln556_fu_192_p1;
wire   [11:0] zext_ln461_fu_214_p1;
wire   [11:0] F2_fu_228_p2;
wire   [11:0] add_ln581_fu_240_p2;
wire   [11:0] sub_ln581_fu_246_p2;
wire   [52:0] tmp_1_fu_266_p3;
wire   [53:0] p_Result_1_fu_273_p1;
wire   [53:0] man_V_1_fu_277_p2;
wire   [53:0] man_V_2_fu_283_p3;
wire  signed [31:0] sext_ln581_fu_290_p1;
wire   [53:0] zext_ln586_fu_307_p1;
wire   [53:0] ashr_ln586_fu_311_p2;
wire   [31:0] bitcast_ln696_fu_321_p1;
wire   [0:0] tmp_4_fu_324_p3;
wire   [13:0] trunc_ln583_fu_293_p1;
wire   [13:0] sext_ln581cast_fu_340_p1;
wire   [0:0] xor_ln571_fu_350_p2;
wire   [0:0] or_ln582_fu_360_p2;
wire   [0:0] xor_ln582_fu_364_p2;
wire   [0:0] icmp_ln585_fu_297_p2;
wire   [0:0] and_ln581_fu_370_p2;
wire   [0:0] xor_ln585_fu_375_p2;
wire   [0:0] or_ln581_fu_393_p2;
wire   [0:0] icmp_ln603_fu_302_p2;
wire   [0:0] xor_ln581_fu_398_p2;
wire   [0:0] and_ln603_fu_404_p2;
wire   [13:0] shl_ln604_fu_344_p2;
wire   [13:0] trunc_ln586_fu_317_p1;
wire   [0:0] and_ln585_1_fu_387_p2;
wire   [0:0] and_ln585_fu_381_p2;
wire   [13:0] select_ln588_fu_332_p3;
wire   [0:0] and_ln582_fu_355_p2;
wire   [0:0] or_ln603_fu_418_p2;
wire   [13:0] select_ln603_fu_410_p3;
wire   [13:0] select_ln603_1_fu_424_p3;
wire   [0:0] or_ln603_1_fu_432_p2;
wire   [0:0] or_ln603_2_fu_446_p2;
wire   [13:0] select_ln603_2_fu_438_p3;
reg   [35:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 36'd1;
end

cnn_fadd_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32ndEe_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_0_reg_90),
    .din1(reg_148),
    .ce(1'b1),
    .dout(grp_fu_124_p2)
);

cnn_fdiv_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fdiv_32ns_32neOg_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_148),
    .din1(sum_0_reg_90),
    .ce(1'b1),
    .dout(grp_fu_129_p2)
);

cnn_fpext_32ns_64bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
cnn_fpext_32ns_64bkb_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v_assign_reg_497),
    .ce(1'b1),
    .dout(grp_fu_134_p1)
);

cnn_fexp_32ns_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fexp_32ns_32nfYi_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dense_array_q0),
    .ce(1'b1),
    .dout(grp_fu_137_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_0_reg_102 <= i_reg_464;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_102 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln15_fu_154_p2 == 1'd1))) begin
        j_0_reg_113 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        j_0_reg_113 <= j_reg_482;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sum_0_reg_90 <= grp_fu_124_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sum_0_reg_90 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_464 <= i_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        icmp_ln571_reg_513 <= icmp_ln571_fu_222_p2;
        icmp_ln581_reg_519 <= icmp_ln581_fu_234_p2;
        icmp_ln582_reg_532 <= icmp_ln582_fu_260_p2;
        p_Result_s_reg_503 <= ireg_V_fu_188_p1[32'd63];
        sh_amt_reg_525 <= sh_amt_fu_252_p3;
        trunc_ln565_reg_508 <= trunc_ln565_fu_218_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        j_reg_482 <= j_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_148 <= grp_fu_137_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        v_assign_reg_497 <= grp_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln20_fu_171_p2 == 1'd0))) begin
        zext_ln22_reg_487[3 : 0] <= zext_ln22_fu_183_p1[3 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state15) & (icmp_ln20_fu_171_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln20_fu_171_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        dense_array_address0 = zext_ln22_fu_183_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dense_array_address0 = zext_ln17_fu_166_p1;
    end else begin
        dense_array_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state15))) begin
        dense_array_ce0 = 1'b1;
    end else begin
        dense_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        pred_V_ce0 = 1'b1;
    end else begin
        pred_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        pred_V_we0 = 1'b1;
    end else begin
        pred_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln15_fu_154_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln20_fu_171_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_228_p2 = (12'd1075 - zext_ln461_fu_214_p1);

assign add_ln581_fu_240_p2 = ($signed(12'd4088) + $signed(F2_fu_228_p2));

assign and_ln581_fu_370_p2 = (xor_ln582_fu_364_p2 & icmp_ln581_reg_519);

assign and_ln582_fu_355_p2 = (xor_ln571_fu_350_p2 & icmp_ln582_reg_532);

assign and_ln585_1_fu_387_p2 = (icmp_ln585_fu_297_p2 & and_ln581_fu_370_p2);

assign and_ln585_fu_381_p2 = (xor_ln585_fu_375_p2 & and_ln581_fu_370_p2);

assign and_ln603_fu_404_p2 = (xor_ln581_fu_398_p2 & icmp_ln603_fu_302_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ashr_ln586_fu_311_p2 = $signed(man_V_2_fu_283_p3) >>> zext_ln586_fu_307_p1;

assign bitcast_ln696_fu_321_p1 = v_assign_reg_497;

assign exp_tmp_V_fu_204_p4 = {{ireg_V_fu_188_p1[62:52]}};

assign i_fu_160_p2 = (i_0_reg_102 + 4'd1);

assign icmp_ln15_fu_154_p2 = ((i_0_reg_102 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_171_p2 = ((j_0_reg_113 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_222_p2 = ((trunc_ln556_fu_192_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_234_p2 = (($signed(F2_fu_228_p2) > $signed(12'd8)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_260_p2 = ((F2_fu_228_p2 == 12'd8) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_297_p2 = ((sh_amt_reg_525 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_302_p2 = ((sh_amt_reg_525 < 12'd14) ? 1'b1 : 1'b0);

assign ireg_V_fu_188_p1 = grp_fu_134_p1;

assign j_fu_177_p2 = (j_0_reg_113 + 4'd1);

assign man_V_1_fu_277_p2 = (54'd0 - p_Result_1_fu_273_p1);

assign man_V_2_fu_283_p3 = ((p_Result_s_reg_503[0:0] === 1'b1) ? man_V_1_fu_277_p2 : p_Result_1_fu_273_p1);

assign or_ln581_fu_393_p2 = (or_ln582_fu_360_p2 | icmp_ln581_reg_519);

assign or_ln582_fu_360_p2 = (icmp_ln582_reg_532 | icmp_ln571_reg_513);

assign or_ln603_1_fu_432_p2 = (and_ln585_fu_381_p2 | and_ln582_fu_355_p2);

assign or_ln603_2_fu_446_p2 = (or_ln603_fu_418_p2 | or_ln603_1_fu_432_p2);

assign or_ln603_fu_418_p2 = (and_ln603_fu_404_p2 | and_ln585_1_fu_387_p2);

assign p_Result_1_fu_273_p1 = tmp_1_fu_266_p3;

assign pred_V_address0 = zext_ln22_reg_487;

assign pred_V_d0 = ((or_ln603_2_fu_446_p2[0:0] === 1'b1) ? select_ln603_2_fu_438_p3 : 14'd0);

assign select_ln588_fu_332_p3 = ((tmp_4_fu_324_p3[0:0] === 1'b1) ? 14'd16383 : 14'd0);

assign select_ln603_1_fu_424_p3 = ((and_ln585_fu_381_p2[0:0] === 1'b1) ? select_ln588_fu_332_p3 : trunc_ln583_fu_293_p1);

assign select_ln603_2_fu_438_p3 = ((or_ln603_fu_418_p2[0:0] === 1'b1) ? select_ln603_fu_410_p3 : select_ln603_1_fu_424_p3);

assign select_ln603_fu_410_p3 = ((and_ln603_fu_404_p2[0:0] === 1'b1) ? shl_ln604_fu_344_p2 : trunc_ln586_fu_317_p1);

assign sext_ln581_fu_290_p1 = sh_amt_reg_525;

assign sext_ln581cast_fu_340_p1 = sext_ln581_fu_290_p1[13:0];

assign sh_amt_fu_252_p3 = ((icmp_ln581_fu_234_p2[0:0] === 1'b1) ? add_ln581_fu_240_p2 : sub_ln581_fu_246_p2);

assign shl_ln604_fu_344_p2 = trunc_ln583_fu_293_p1 << sext_ln581cast_fu_340_p1;

assign sub_ln581_fu_246_p2 = (12'd8 - F2_fu_228_p2);

assign tmp_1_fu_266_p3 = {{1'd1}, {trunc_ln565_reg_508}};

assign tmp_4_fu_324_p3 = bitcast_ln696_fu_321_p1[32'd31];

assign trunc_ln556_fu_192_p1 = ireg_V_fu_188_p1[62:0];

assign trunc_ln565_fu_218_p1 = ireg_V_fu_188_p1[51:0];

assign trunc_ln583_fu_293_p1 = man_V_2_fu_283_p3[13:0];

assign trunc_ln586_fu_317_p1 = ashr_ln586_fu_311_p2[13:0];

assign xor_ln571_fu_350_p2 = (icmp_ln571_reg_513 ^ 1'd1);

assign xor_ln581_fu_398_p2 = (or_ln581_fu_393_p2 ^ 1'd1);

assign xor_ln582_fu_364_p2 = (or_ln582_fu_360_p2 ^ 1'd1);

assign xor_ln585_fu_375_p2 = (icmp_ln585_fu_297_p2 ^ 1'd1);

assign zext_ln17_fu_166_p1 = i_0_reg_102;

assign zext_ln22_fu_183_p1 = j_0_reg_113;

assign zext_ln461_fu_214_p1 = exp_tmp_V_fu_204_p4;

assign zext_ln586_fu_307_p1 = $unsigned(sext_ln581_fu_290_p1);

always @ (posedge ap_clk) begin
    zext_ln22_reg_487[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //soft_max
