// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        feature_0_address0,
        feature_0_ce0,
        feature_0_q0,
        feature_1_address0,
        feature_1_ce0,
        feature_1_q0,
        feature_2_address0,
        feature_2_ce0,
        feature_2_q0,
        feature_3_address0,
        feature_3_ce0,
        feature_3_q0,
        feature_4_address0,
        feature_4_ce0,
        feature_4_q0,
        feature_5_address0,
        feature_5_ce0,
        feature_5_q0,
        feature_6_address0,
        feature_6_ce0,
        feature_6_q0,
        feature_7_address0,
        feature_7_ce0,
        feature_7_q0,
        feature_8_address0,
        feature_8_ce0,
        feature_8_q0,
        feature_9_address0,
        feature_9_ce0,
        feature_9_q0,
        feature_offset,
        pool_feature_address0,
        pool_feature_ce0,
        pool_feature_we0,
        pool_feature_d0,
        b
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] feature_0_address0;
output   feature_0_ce0;
input  [31:0] feature_0_q0;
output  [5:0] feature_1_address0;
output   feature_1_ce0;
input  [31:0] feature_1_q0;
output  [5:0] feature_2_address0;
output   feature_2_ce0;
input  [31:0] feature_2_q0;
output  [5:0] feature_3_address0;
output   feature_3_ce0;
input  [31:0] feature_3_q0;
output  [5:0] feature_4_address0;
output   feature_4_ce0;
input  [31:0] feature_4_q0;
output  [5:0] feature_5_address0;
output   feature_5_ce0;
input  [31:0] feature_5_q0;
output  [5:0] feature_6_address0;
output   feature_6_ce0;
input  [31:0] feature_6_q0;
output  [5:0] feature_7_address0;
output   feature_7_ce0;
input  [31:0] feature_7_q0;
output  [5:0] feature_8_address0;
output   feature_8_ce0;
input  [31:0] feature_8_q0;
output  [5:0] feature_9_address0;
output   feature_9_ce0;
input  [31:0] feature_9_q0;
input  [3:0] feature_offset;
output  [7:0] pool_feature_address0;
output   pool_feature_ce0;
output   pool_feature_we0;
output  [31:0] pool_feature_d0;
input  [31:0] b;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg feature_0_ce0;
reg feature_1_ce0;
reg feature_2_ce0;
reg feature_3_ce0;
reg feature_4_ce0;
reg feature_5_ce0;
reg feature_6_ce0;
reg feature_7_ce0;
reg feature_8_ce0;
reg feature_9_ce0;
reg pool_feature_ce0;
reg pool_feature_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] trunc_ln28_1_reg_640;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_7_fu_317_p3;
wire   [3:0] r_fu_343_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_8_fu_335_p3;
wire   [1:0] pr_fu_359_p2;
reg   [1:0] pr_reg_656;
wire    ap_CS_fsm_state4;
wire   [7:0] zext_ln22_1_fu_379_p1;
reg   [7:0] zext_ln22_1_reg_661;
wire   [0:0] icmp_ln21_fu_353_p2;
wire   [3:0] c_fu_457_p2;
wire   [1:0] pc_fu_473_p2;
reg   [1:0] pc_reg_674;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln22_fu_467_p2;
wire   [31:0] pool_2_fu_618_p3;
wire    ap_CS_fsm_state6;
reg   [3:0] r_0_reg_235;
reg   [3:0] c_0_reg_247;
reg   [31:0] pool_0_reg_259;
reg   [1:0] pr_0_reg_271;
reg   [31:0] pool_1_reg_282;
reg   [1:0] pc_0_reg_294;
wire   [63:0] zext_ln28_fu_452_p1;
wire   [63:0] zext_ln24_1_fu_494_p1;
reg   [31:0] grp_fu_310_p0;
wire   [31:0] x_assign_fu_305_p2;
wire   [31:0] pool_fu_508_p12;
reg   [31:0] grp_fu_310_p1;
wire   [3:0] zext_ln21_fu_349_p1;
wire   [3:0] add_ln24_fu_365_p2;
wire   [6:0] tmp_6_fu_371_p3;
wire   [31:0] bitcast_ln7_fu_383_p1;
wire   [7:0] tmp_fu_387_p4;
wire   [22:0] trunc_ln7_fu_397_p1;
wire   [0:0] icmp_ln7_1_fu_407_p2;
wire   [0:0] icmp_ln7_fu_401_p2;
wire   [0:0] or_ln7_fu_413_p2;
wire   [0:0] grp_fu_310_p2;
wire   [0:0] and_ln7_fu_419_p2;
wire   [1:0] trunc_ln28_3_fu_434_p4;
wire   [7:0] tmp_2_fu_444_p4;
wire   [3:0] zext_ln22_fu_463_p1;
wire   [3:0] add_ln24_1_fu_479_p2;
wire   [7:0] zext_ln24_fu_485_p1;
wire   [7:0] add_ln24_2_fu_489_p2;
wire   [31:0] bitcast_ln24_fu_534_p1;
wire   [31:0] bitcast_ln24_1_fu_552_p1;
wire   [7:0] tmp_3_fu_538_p4;
wire   [22:0] trunc_ln24_fu_548_p1;
wire   [0:0] icmp_ln24_1_fu_576_p2;
wire   [0:0] icmp_ln24_fu_570_p2;
wire   [7:0] tmp_4_fu_556_p4;
wire   [22:0] trunc_ln24_1_fu_566_p1;
wire   [0:0] icmp_ln24_3_fu_594_p2;
wire   [0:0] icmp_ln24_2_fu_588_p2;
wire   [0:0] or_ln24_fu_582_p2;
wire   [0:0] or_ln24_1_fu_600_p2;
wire   [0:0] and_ln24_fu_606_p2;
wire   [0:0] and_ln24_1_fu_612_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

cnn_fadd_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32ncud_U13(
    .din0(pool_0_reg_259),
    .din1(b),
    .dout(x_assign_fu_305_p2)
);

cnn_fcmp_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32nbkb_U14(
    .din0(grp_fu_310_p0),
    .din1(grp_fu_310_p1),
    .opcode(5'd2),
    .dout(grp_fu_310_p2)
);

cnn_mux_104_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
cnn_mux_104_32_1_1_U15(
    .din0(feature_0_q0),
    .din1(feature_1_q0),
    .din2(feature_2_q0),
    .din3(feature_3_q0),
    .din4(feature_4_q0),
    .din5(feature_5_q0),
    .din6(feature_6_q0),
    .din7(feature_7_q0),
    .din8(feature_8_q0),
    .din9(feature_9_q0),
    .din10(feature_offset),
    .dout(pool_fu_508_p12)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_7_fu_317_p3 == 1'd0))) begin
        c_0_reg_247 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln21_fu_353_p2 == 1'd1))) begin
        c_0_reg_247 <= c_fu_457_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln21_fu_353_p2 == 1'd0))) begin
        pc_0_reg_294 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        pc_0_reg_294 <= pc_reg_674;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_8_fu_335_p3 == 1'd0))) begin
        pool_0_reg_259 <= 32'd8388608;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln22_fu_467_p2 == 1'd1))) begin
        pool_0_reg_259 <= pool_1_reg_282;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln21_fu_353_p2 == 1'd0))) begin
        pool_1_reg_282 <= pool_0_reg_259;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        pool_1_reg_282 <= pool_2_fu_618_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_8_fu_335_p3 == 1'd0))) begin
        pr_0_reg_271 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln22_fu_467_p2 == 1'd1))) begin
        pr_0_reg_271 <= pr_reg_656;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_8_fu_335_p3 == 1'd1))) begin
        r_0_reg_235 <= r_fu_343_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_235 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        pc_reg_674 <= pc_fu_473_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pr_reg_656 <= pr_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_7_fu_317_p3 == 1'd0))) begin
        trunc_ln28_1_reg_640 <= {{r_0_reg_235[2:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln21_fu_353_p2 == 1'd0))) begin
        zext_ln22_1_reg_661[6 : 3] <= zext_ln22_1_fu_379_p1[6 : 3];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_7_fu_317_p3 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_7_fu_317_p3 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_0_ce0 = 1'b1;
    end else begin
        feature_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_1_ce0 = 1'b1;
    end else begin
        feature_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_2_ce0 = 1'b1;
    end else begin
        feature_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_3_ce0 = 1'b1;
    end else begin
        feature_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_4_ce0 = 1'b1;
    end else begin
        feature_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_5_ce0 = 1'b1;
    end else begin
        feature_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_6_ce0 = 1'b1;
    end else begin
        feature_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_7_ce0 = 1'b1;
    end else begin
        feature_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_8_ce0 = 1'b1;
    end else begin
        feature_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_9_ce0 = 1'b1;
    end else begin
        feature_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_310_p0 = pool_fu_508_p12;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_310_p0 = x_assign_fu_305_p2;
    end else begin
        grp_fu_310_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_310_p1 = pool_1_reg_282;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_310_p1 = 32'd0;
    end else begin
        grp_fu_310_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pool_feature_ce0 = 1'b1;
    end else begin
        pool_feature_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln21_fu_353_p2 == 1'd1))) begin
        pool_feature_we0 = 1'b1;
    end else begin
        pool_feature_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_7_fu_317_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_8_fu_335_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln21_fu_353_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln22_fu_467_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln24_1_fu_479_p2 = (zext_ln22_fu_463_p1 + c_0_reg_247);

assign add_ln24_2_fu_489_p2 = (zext_ln22_1_reg_661 + zext_ln24_fu_485_p1);

assign add_ln24_fu_365_p2 = (r_0_reg_235 + zext_ln21_fu_349_p1);

assign and_ln24_1_fu_612_p2 = (grp_fu_310_p2 & and_ln24_fu_606_p2);

assign and_ln24_fu_606_p2 = (or_ln24_fu_582_p2 & or_ln24_1_fu_600_p2);

assign and_ln7_fu_419_p2 = (or_ln7_fu_413_p2 & grp_fu_310_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign bitcast_ln24_1_fu_552_p1 = pool_1_reg_282;

assign bitcast_ln24_fu_534_p1 = pool_fu_508_p12;

assign bitcast_ln7_fu_383_p1 = x_assign_fu_305_p2;

assign c_fu_457_p2 = (4'd2 + c_0_reg_247);

assign feature_0_address0 = zext_ln24_1_fu_494_p1;

assign feature_1_address0 = zext_ln24_1_fu_494_p1;

assign feature_2_address0 = zext_ln24_1_fu_494_p1;

assign feature_3_address0 = zext_ln24_1_fu_494_p1;

assign feature_4_address0 = zext_ln24_1_fu_494_p1;

assign feature_5_address0 = zext_ln24_1_fu_494_p1;

assign feature_6_address0 = zext_ln24_1_fu_494_p1;

assign feature_7_address0 = zext_ln24_1_fu_494_p1;

assign feature_8_address0 = zext_ln24_1_fu_494_p1;

assign feature_9_address0 = zext_ln24_1_fu_494_p1;

assign icmp_ln21_fu_353_p2 = ((pr_0_reg_271 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_467_p2 = ((pc_0_reg_294 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln24_1_fu_576_p2 = ((trunc_ln24_fu_548_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln24_2_fu_588_p2 = ((tmp_4_fu_556_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln24_3_fu_594_p2 = ((trunc_ln24_1_fu_566_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_570_p2 = ((tmp_3_fu_538_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln7_1_fu_407_p2 = ((trunc_ln7_fu_397_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_401_p2 = ((tmp_fu_387_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln24_1_fu_600_p2 = (icmp_ln24_3_fu_594_p2 | icmp_ln24_2_fu_588_p2);

assign or_ln24_fu_582_p2 = (icmp_ln24_fu_570_p2 | icmp_ln24_1_fu_576_p2);

assign or_ln7_fu_413_p2 = (icmp_ln7_fu_401_p2 | icmp_ln7_1_fu_407_p2);

assign pc_fu_473_p2 = (pc_0_reg_294 + 2'd1);

assign pool_2_fu_618_p3 = ((and_ln24_1_fu_612_p2[0:0] === 1'b1) ? pool_fu_508_p12 : pool_1_reg_282);

assign pool_feature_address0 = zext_ln28_fu_452_p1;

assign pool_feature_d0 = ((and_ln7_fu_419_p2[0:0] === 1'b1) ? x_assign_fu_305_p2 : 32'd0);

assign pr_fu_359_p2 = (pr_0_reg_271 + 2'd1);

assign r_fu_343_p2 = (r_0_reg_235 + 4'd2);

assign tmp_2_fu_444_p4 = {{{feature_offset}, {trunc_ln28_1_reg_640}}, {trunc_ln28_3_fu_434_p4}};

assign tmp_3_fu_538_p4 = {{bitcast_ln24_fu_534_p1[30:23]}};

assign tmp_4_fu_556_p4 = {{bitcast_ln24_1_fu_552_p1[30:23]}};

assign tmp_6_fu_371_p3 = {{add_ln24_fu_365_p2}, {3'd0}};

assign tmp_7_fu_317_p3 = r_0_reg_235[32'd3];

assign tmp_8_fu_335_p3 = c_0_reg_247[32'd3];

assign tmp_fu_387_p4 = {{bitcast_ln7_fu_383_p1[30:23]}};

assign trunc_ln24_1_fu_566_p1 = bitcast_ln24_1_fu_552_p1[22:0];

assign trunc_ln24_fu_548_p1 = bitcast_ln24_fu_534_p1[22:0];

assign trunc_ln28_3_fu_434_p4 = {{c_0_reg_247[2:1]}};

assign trunc_ln7_fu_397_p1 = bitcast_ln7_fu_383_p1[22:0];

assign zext_ln21_fu_349_p1 = pr_0_reg_271;

assign zext_ln22_1_fu_379_p1 = tmp_6_fu_371_p3;

assign zext_ln22_fu_463_p1 = pc_0_reg_294;

assign zext_ln24_1_fu_494_p1 = add_ln24_2_fu_489_p2;

assign zext_ln24_fu_485_p1 = add_ln24_1_fu_479_p2;

assign zext_ln28_fu_452_p1 = tmp_2_fu_444_p4;

always @ (posedge ap_clk) begin
    zext_ln22_1_reg_661[2:0] <= 3'b000;
    zext_ln22_1_reg_661[7] <= 1'b0;
end

endmodule //max_pool2
