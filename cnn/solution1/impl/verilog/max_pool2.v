// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        feature_0_V_address0,
        feature_0_V_ce0,
        feature_0_V_q0,
        feature_1_V_address0,
        feature_1_V_ce0,
        feature_1_V_q0,
        feature_2_V_address0,
        feature_2_V_ce0,
        feature_2_V_q0,
        feature_3_V_address0,
        feature_3_V_ce0,
        feature_3_V_q0,
        feature_4_V_address0,
        feature_4_V_ce0,
        feature_4_V_q0,
        feature_5_V_address0,
        feature_5_V_ce0,
        feature_5_V_q0,
        feature_6_V_address0,
        feature_6_V_ce0,
        feature_6_V_q0,
        feature_7_V_address0,
        feature_7_V_ce0,
        feature_7_V_q0,
        feature_8_V_address0,
        feature_8_V_ce0,
        feature_8_V_q0,
        feature_9_V_address0,
        feature_9_V_ce0,
        feature_9_V_q0,
        feature_V_offset,
        pool_feature_V_address0,
        pool_feature_V_ce0,
        pool_feature_V_we0,
        pool_feature_V_d0,
        b_V
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] feature_0_V_address0;
output   feature_0_V_ce0;
input  [14:0] feature_0_V_q0;
output  [5:0] feature_1_V_address0;
output   feature_1_V_ce0;
input  [14:0] feature_1_V_q0;
output  [5:0] feature_2_V_address0;
output   feature_2_V_ce0;
input  [14:0] feature_2_V_q0;
output  [5:0] feature_3_V_address0;
output   feature_3_V_ce0;
input  [14:0] feature_3_V_q0;
output  [5:0] feature_4_V_address0;
output   feature_4_V_ce0;
input  [14:0] feature_4_V_q0;
output  [5:0] feature_5_V_address0;
output   feature_5_V_ce0;
input  [14:0] feature_5_V_q0;
output  [5:0] feature_6_V_address0;
output   feature_6_V_ce0;
input  [14:0] feature_6_V_q0;
output  [5:0] feature_7_V_address0;
output   feature_7_V_ce0;
input  [14:0] feature_7_V_q0;
output  [5:0] feature_8_V_address0;
output   feature_8_V_ce0;
input  [14:0] feature_8_V_q0;
output  [5:0] feature_9_V_address0;
output   feature_9_V_ce0;
input  [14:0] feature_9_V_q0;
input  [3:0] feature_V_offset;
output  [7:0] pool_feature_V_address0;
output   pool_feature_V_ce0;
output   pool_feature_V_we0;
output  [13:0] pool_feature_V_d0;
input  [9:0] b_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg feature_0_V_ce0;
reg feature_1_V_ce0;
reg feature_2_V_ce0;
reg feature_3_V_ce0;
reg feature_4_V_ce0;
reg feature_5_V_ce0;
reg feature_6_V_ce0;
reg feature_7_V_ce0;
reg feature_8_V_ce0;
reg feature_9_V_ce0;
reg pool_feature_V_ce0;
reg pool_feature_V_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [14:0] b_V_cast_fu_295_p1;
reg  signed [14:0] b_V_cast_reg_517;
wire  signed [13:0] sext_ln703_fu_299_p1;
reg  signed [13:0] sext_ln703_reg_522;
reg   [1:0] trunc_ln26_1_reg_530;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_5_fu_303_p3;
wire   [3:0] r_fu_329_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_6_fu_321_p3;
wire   [1:0] pr_fu_345_p2;
reg   [1:0] pr_reg_546;
wire    ap_CS_fsm_state4;
wire   [7:0] zext_ln20_1_fu_365_p1;
reg   [7:0] zext_ln20_1_reg_551;
wire   [0:0] icmp_ln19_fu_339_p2;
wire   [3:0] c_fu_421_p2;
wire   [1:0] pc_fu_437_p2;
reg   [1:0] pc_reg_564;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln20_fu_431_p2;
wire   [14:0] select_ln22_fu_503_p3;
wire    ap_CS_fsm_state6;
reg   [3:0] r_0_reg_225;
reg   [3:0] c_0_reg_237;
reg   [14:0] p_Val2_s_reg_249;
reg   [1:0] pr_0_reg_261;
reg   [14:0] pool_1_reg_272;
reg   [1:0] pc_0_reg_284;
wire   [63:0] zext_ln203_fu_387_p1;
wire   [63:0] zext_ln1494_1_fu_458_p1;
wire  signed [9:0] b_V_cast_fu_295_p0;
wire  signed [9:0] sext_ln703_fu_299_p0;
wire   [3:0] zext_ln19_fu_335_p1;
wire   [3:0] add_ln22_fu_351_p2;
wire   [6:0] tmp_1_fu_357_p3;
wire   [1:0] trunc_ln26_3_fu_369_p4;
wire   [7:0] tmp_fu_379_p4;
wire   [13:0] trunc_ln703_fu_392_p1;
wire   [14:0] add_ln703_fu_396_p2;
wire   [0:0] icmp_ln1494_1_fu_406_p2;
wire   [13:0] add_ln1494_fu_401_p2;
wire   [3:0] zext_ln20_fu_427_p1;
wire   [3:0] add_ln22_1_fu_443_p2;
wire   [7:0] zext_ln1494_fu_449_p1;
wire   [7:0] add_ln1494_1_fu_453_p2;
wire   [14:0] pool_V_fu_472_p12;
wire   [0:0] icmp_ln1494_fu_497_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

cnn_mux_104_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 15 ),
    .din3_WIDTH( 15 ),
    .din4_WIDTH( 15 ),
    .din5_WIDTH( 15 ),
    .din6_WIDTH( 15 ),
    .din7_WIDTH( 15 ),
    .din8_WIDTH( 15 ),
    .din9_WIDTH( 15 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 15 ))
cnn_mux_104_15_1_1_U21(
    .din0(feature_0_V_q0),
    .din1(feature_1_V_q0),
    .din2(feature_2_V_q0),
    .din3(feature_3_V_q0),
    .din4(feature_4_V_q0),
    .din5(feature_5_V_q0),
    .din6(feature_6_V_q0),
    .din7(feature_7_V_q0),
    .din8(feature_8_V_q0),
    .din9(feature_9_V_q0),
    .din10(feature_V_offset),
    .dout(pool_V_fu_472_p12)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_5_fu_303_p3 == 1'd0))) begin
        c_0_reg_237 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln19_fu_339_p2 == 1'd1))) begin
        c_0_reg_237 <= c_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_6_fu_321_p3 == 1'd0))) begin
        p_Val2_s_reg_249 <= 15'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_431_p2 == 1'd1))) begin
        p_Val2_s_reg_249 <= pool_1_reg_272;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        pc_0_reg_284 <= pc_reg_564;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln19_fu_339_p2 == 1'd0))) begin
        pc_0_reg_284 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        pool_1_reg_272 <= select_ln22_fu_503_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln19_fu_339_p2 == 1'd0))) begin
        pool_1_reg_272 <= p_Val2_s_reg_249;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_6_fu_321_p3 == 1'd0))) begin
        pr_0_reg_261 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_431_p2 == 1'd1))) begin
        pr_0_reg_261 <= pr_reg_546;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_6_fu_321_p3 == 1'd1))) begin
        r_0_reg_225 <= r_fu_329_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_225 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        b_V_cast_reg_517 <= b_V_cast_fu_295_p1;
        sext_ln703_reg_522 <= sext_ln703_fu_299_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        pc_reg_564 <= pc_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pr_reg_546 <= pr_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_5_fu_303_p3 == 1'd0))) begin
        trunc_ln26_1_reg_530 <= {{r_0_reg_225[2:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln19_fu_339_p2 == 1'd0))) begin
        zext_ln20_1_reg_551[6 : 3] <= zext_ln20_1_fu_365_p1[6 : 3];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_5_fu_303_p3 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_5_fu_303_p3 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_0_V_ce0 = 1'b1;
    end else begin
        feature_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_1_V_ce0 = 1'b1;
    end else begin
        feature_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_2_V_ce0 = 1'b1;
    end else begin
        feature_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_3_V_ce0 = 1'b1;
    end else begin
        feature_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_4_V_ce0 = 1'b1;
    end else begin
        feature_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_5_V_ce0 = 1'b1;
    end else begin
        feature_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_6_V_ce0 = 1'b1;
    end else begin
        feature_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_7_V_ce0 = 1'b1;
    end else begin
        feature_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_8_V_ce0 = 1'b1;
    end else begin
        feature_8_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_9_V_ce0 = 1'b1;
    end else begin
        feature_9_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pool_feature_V_ce0 = 1'b1;
    end else begin
        pool_feature_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln19_fu_339_p2 == 1'd1))) begin
        pool_feature_V_we0 = 1'b1;
    end else begin
        pool_feature_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_5_fu_303_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_6_fu_321_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln19_fu_339_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_431_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1494_1_fu_453_p2 = (zext_ln20_1_reg_551 + zext_ln1494_fu_449_p1);

assign add_ln1494_fu_401_p2 = ($signed(sext_ln703_reg_522) + $signed(trunc_ln703_fu_392_p1));

assign add_ln22_1_fu_443_p2 = (zext_ln20_fu_427_p1 + c_0_reg_237);

assign add_ln22_fu_351_p2 = (r_0_reg_225 + zext_ln19_fu_335_p1);

assign add_ln703_fu_396_p2 = ($signed(p_Val2_s_reg_249) + $signed(b_V_cast_reg_517));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign b_V_cast_fu_295_p0 = b_V;

assign b_V_cast_fu_295_p1 = b_V_cast_fu_295_p0;

assign c_fu_421_p2 = (4'd2 + c_0_reg_237);

assign feature_0_V_address0 = zext_ln1494_1_fu_458_p1;

assign feature_1_V_address0 = zext_ln1494_1_fu_458_p1;

assign feature_2_V_address0 = zext_ln1494_1_fu_458_p1;

assign feature_3_V_address0 = zext_ln1494_1_fu_458_p1;

assign feature_4_V_address0 = zext_ln1494_1_fu_458_p1;

assign feature_5_V_address0 = zext_ln1494_1_fu_458_p1;

assign feature_6_V_address0 = zext_ln1494_1_fu_458_p1;

assign feature_7_V_address0 = zext_ln1494_1_fu_458_p1;

assign feature_8_V_address0 = zext_ln1494_1_fu_458_p1;

assign feature_9_V_address0 = zext_ln1494_1_fu_458_p1;

assign icmp_ln1494_1_fu_406_p2 = (($signed(add_ln703_fu_396_p2) > $signed(15'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_497_p2 = (($signed(pool_V_fu_472_p12) > $signed(pool_1_reg_272)) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_339_p2 = ((pr_0_reg_261 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_431_p2 = ((pc_0_reg_284 == 2'd2) ? 1'b1 : 1'b0);

assign pc_fu_437_p2 = (pc_0_reg_284 + 2'd1);

assign pool_feature_V_address0 = zext_ln203_fu_387_p1;

assign pool_feature_V_d0 = ((icmp_ln1494_1_fu_406_p2[0:0] === 1'b1) ? add_ln1494_fu_401_p2 : 14'd0);

assign pr_fu_345_p2 = (pr_0_reg_261 + 2'd1);

assign r_fu_329_p2 = (r_0_reg_225 + 4'd2);

assign select_ln22_fu_503_p3 = ((icmp_ln1494_fu_497_p2[0:0] === 1'b1) ? pool_V_fu_472_p12 : pool_1_reg_272);

assign sext_ln703_fu_299_p0 = b_V;

assign sext_ln703_fu_299_p1 = sext_ln703_fu_299_p0;

assign tmp_1_fu_357_p3 = {{add_ln22_fu_351_p2}, {3'd0}};

assign tmp_5_fu_303_p3 = r_0_reg_225[32'd3];

assign tmp_6_fu_321_p3 = c_0_reg_237[32'd3];

assign tmp_fu_379_p4 = {{{feature_V_offset}, {trunc_ln26_1_reg_530}}, {trunc_ln26_3_fu_369_p4}};

assign trunc_ln26_3_fu_369_p4 = {{c_0_reg_237[2:1]}};

assign trunc_ln703_fu_392_p1 = p_Val2_s_reg_249[13:0];

assign zext_ln1494_1_fu_458_p1 = add_ln1494_1_fu_453_p2;

assign zext_ln1494_fu_449_p1 = add_ln22_1_fu_443_p2;

assign zext_ln19_fu_335_p1 = pr_0_reg_261;

assign zext_ln203_fu_387_p1 = tmp_fu_379_p4;

assign zext_ln20_1_fu_365_p1 = tmp_1_fu_357_p3;

assign zext_ln20_fu_427_p1 = pc_0_reg_284;

always @ (posedge ap_clk) begin
    zext_ln20_1_reg_551[2:0] <= 3'b000;
    zext_ln20_1_reg_551[7] <= 1'b0;
end

endmodule //max_pool2
