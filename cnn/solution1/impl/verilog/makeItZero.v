// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module makeItZero (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_0_V_address0,
        A_0_V_ce0,
        A_0_V_we0,
        A_0_V_d0,
        A_1_V_address0,
        A_1_V_ce0,
        A_1_V_we0,
        A_1_V_d0,
        A_2_V_address0,
        A_2_V_ce0,
        A_2_V_we0,
        A_2_V_d0,
        A_3_V_address0,
        A_3_V_ce0,
        A_3_V_we0,
        A_3_V_d0,
        A_4_V_address0,
        A_4_V_ce0,
        A_4_V_we0,
        A_4_V_d0,
        A_5_V_address0,
        A_5_V_ce0,
        A_5_V_we0,
        A_5_V_d0,
        A_6_V_address0,
        A_6_V_ce0,
        A_6_V_we0,
        A_6_V_d0,
        A_7_V_address0,
        A_7_V_ce0,
        A_7_V_we0,
        A_7_V_d0,
        A_8_V_address0,
        A_8_V_ce0,
        A_8_V_we0,
        A_8_V_d0,
        A_9_V_address0,
        A_9_V_ce0,
        A_9_V_we0,
        A_9_V_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] A_0_V_address0;
output   A_0_V_ce0;
output   A_0_V_we0;
output  [14:0] A_0_V_d0;
output  [5:0] A_1_V_address0;
output   A_1_V_ce0;
output   A_1_V_we0;
output  [14:0] A_1_V_d0;
output  [5:0] A_2_V_address0;
output   A_2_V_ce0;
output   A_2_V_we0;
output  [14:0] A_2_V_d0;
output  [5:0] A_3_V_address0;
output   A_3_V_ce0;
output   A_3_V_we0;
output  [14:0] A_3_V_d0;
output  [5:0] A_4_V_address0;
output   A_4_V_ce0;
output   A_4_V_we0;
output  [14:0] A_4_V_d0;
output  [5:0] A_5_V_address0;
output   A_5_V_ce0;
output   A_5_V_we0;
output  [14:0] A_5_V_d0;
output  [5:0] A_6_V_address0;
output   A_6_V_ce0;
output   A_6_V_we0;
output  [14:0] A_6_V_d0;
output  [5:0] A_7_V_address0;
output   A_7_V_ce0;
output   A_7_V_we0;
output  [14:0] A_7_V_d0;
output  [5:0] A_8_V_address0;
output   A_8_V_ce0;
output   A_8_V_we0;
output  [14:0] A_8_V_d0;
output  [5:0] A_9_V_address0;
output   A_9_V_ce0;
output   A_9_V_we0;
output  [14:0] A_9_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_0_V_ce0;
reg A_0_V_we0;
reg A_1_V_ce0;
reg A_1_V_we0;
reg A_2_V_ce0;
reg A_2_V_we0;
reg A_3_V_ce0;
reg A_3_V_we0;
reg A_4_V_ce0;
reg A_4_V_we0;
reg A_5_V_ce0;
reg A_5_V_we0;
reg A_6_V_ce0;
reg A_6_V_we0;
reg A_7_V_ce0;
reg A_7_V_we0;
reg A_8_V_ce0;
reg A_8_V_we0;
reg A_9_V_ce0;
reg A_9_V_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] f_fu_234_p2;
reg   [3:0] f_reg_302;
wire    ap_CS_fsm_state2;
wire   [3:0] row_fu_246_p2;
reg   [3:0] row_reg_310;
wire    ap_CS_fsm_state3;
wire   [7:0] zext_ln7_fu_260_p1;
reg   [7:0] zext_ln7_reg_315;
wire   [0:0] icmp_ln6_fu_240_p2;
wire   [3:0] col_fu_270_p2;
wire    ap_CS_fsm_state4;
reg   [3:0] f_0_reg_194;
reg   [3:0] row_0_reg_206;
wire   [0:0] icmp_ln7_fu_264_p2;
wire   [0:0] icmp_ln5_fu_228_p2;
reg   [3:0] col_0_reg_217;
wire   [63:0] zext_ln203_5_fu_285_p1;
wire   [6:0] tmp_fu_252_p3;
wire   [7:0] zext_ln203_fu_276_p1;
wire   [7:0] add_ln203_fu_280_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln6_fu_240_p2 == 1'd0))) begin
        col_0_reg_217 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln7_fu_264_p2 == 1'd0))) begin
        col_0_reg_217 <= col_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln6_fu_240_p2 == 1'd1))) begin
        f_0_reg_194 <= f_reg_302;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_194 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln5_fu_228_p2 == 1'd0))) begin
        row_0_reg_206 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln7_fu_264_p2 == 1'd1))) begin
        row_0_reg_206 <= row_reg_310;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_302 <= f_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        row_reg_310 <= row_fu_246_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln6_fu_240_p2 == 1'd0))) begin
        zext_ln7_reg_315[6 : 3] <= zext_ln7_fu_260_p1[6 : 3];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_0_V_ce0 = 1'b1;
    end else begin
        A_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (f_0_reg_194 == 4'd0) & (icmp_ln7_fu_264_p2 == 1'd0))) begin
        A_0_V_we0 = 1'b1;
    end else begin
        A_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_1_V_ce0 = 1'b1;
    end else begin
        A_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (f_0_reg_194 == 4'd1) & (icmp_ln7_fu_264_p2 == 1'd0))) begin
        A_1_V_we0 = 1'b1;
    end else begin
        A_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_2_V_ce0 = 1'b1;
    end else begin
        A_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (f_0_reg_194 == 4'd2) & (icmp_ln7_fu_264_p2 == 1'd0))) begin
        A_2_V_we0 = 1'b1;
    end else begin
        A_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_3_V_ce0 = 1'b1;
    end else begin
        A_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (f_0_reg_194 == 4'd3) & (icmp_ln7_fu_264_p2 == 1'd0))) begin
        A_3_V_we0 = 1'b1;
    end else begin
        A_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_4_V_ce0 = 1'b1;
    end else begin
        A_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (f_0_reg_194 == 4'd4) & (icmp_ln7_fu_264_p2 == 1'd0))) begin
        A_4_V_we0 = 1'b1;
    end else begin
        A_4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_5_V_ce0 = 1'b1;
    end else begin
        A_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (f_0_reg_194 == 4'd5) & (icmp_ln7_fu_264_p2 == 1'd0))) begin
        A_5_V_we0 = 1'b1;
    end else begin
        A_5_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_6_V_ce0 = 1'b1;
    end else begin
        A_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (f_0_reg_194 == 4'd6) & (icmp_ln7_fu_264_p2 == 1'd0))) begin
        A_6_V_we0 = 1'b1;
    end else begin
        A_6_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_7_V_ce0 = 1'b1;
    end else begin
        A_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (f_0_reg_194 == 4'd7) & (icmp_ln7_fu_264_p2 == 1'd0))) begin
        A_7_V_we0 = 1'b1;
    end else begin
        A_7_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_8_V_ce0 = 1'b1;
    end else begin
        A_8_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (f_0_reg_194 == 4'd8) & (icmp_ln7_fu_264_p2 == 1'd0))) begin
        A_8_V_we0 = 1'b1;
    end else begin
        A_8_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_9_V_ce0 = 1'b1;
    end else begin
        A_9_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(f_0_reg_194 == 4'd0) & ~(f_0_reg_194 == 4'd1) & ~(f_0_reg_194 == 4'd2) & ~(f_0_reg_194 == 4'd3) & ~(f_0_reg_194 == 4'd4) & ~(f_0_reg_194 == 4'd5) & ~(f_0_reg_194 == 4'd6) & ~(f_0_reg_194 == 4'd7) & ~(f_0_reg_194 == 4'd8) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln7_fu_264_p2 == 1'd0))) begin
        A_9_V_we0 = 1'b1;
    end else begin
        A_9_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln5_fu_228_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln5_fu_228_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln5_fu_228_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln6_fu_240_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln7_fu_264_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_0_V_address0 = zext_ln203_5_fu_285_p1;

assign A_0_V_d0 = 15'd0;

assign A_1_V_address0 = zext_ln203_5_fu_285_p1;

assign A_1_V_d0 = 15'd0;

assign A_2_V_address0 = zext_ln203_5_fu_285_p1;

assign A_2_V_d0 = 15'd0;

assign A_3_V_address0 = zext_ln203_5_fu_285_p1;

assign A_3_V_d0 = 15'd0;

assign A_4_V_address0 = zext_ln203_5_fu_285_p1;

assign A_4_V_d0 = 15'd0;

assign A_5_V_address0 = zext_ln203_5_fu_285_p1;

assign A_5_V_d0 = 15'd0;

assign A_6_V_address0 = zext_ln203_5_fu_285_p1;

assign A_6_V_d0 = 15'd0;

assign A_7_V_address0 = zext_ln203_5_fu_285_p1;

assign A_7_V_d0 = 15'd0;

assign A_8_V_address0 = zext_ln203_5_fu_285_p1;

assign A_8_V_d0 = 15'd0;

assign A_9_V_address0 = zext_ln203_5_fu_285_p1;

assign A_9_V_d0 = 15'd0;

assign add_ln203_fu_280_p2 = (zext_ln7_reg_315 + zext_ln203_fu_276_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign col_fu_270_p2 = (col_0_reg_217 + 4'd1);

assign f_fu_234_p2 = (f_0_reg_194 + 4'd1);

assign icmp_ln5_fu_228_p2 = ((f_0_reg_194 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_240_p2 = ((row_0_reg_206 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_264_p2 = ((col_0_reg_217 == 4'd8) ? 1'b1 : 1'b0);

assign row_fu_246_p2 = (row_0_reg_206 + 4'd1);

assign tmp_fu_252_p3 = {{row_0_reg_206}, {3'd0}};

assign zext_ln203_5_fu_285_p1 = add_ln203_fu_280_p2;

assign zext_ln203_fu_276_p1 = col_0_reg_217;

assign zext_ln7_fu_260_p1 = tmp_fu_252_p3;

always @ (posedge ap_clk) begin
    zext_ln7_reg_315[2:0] <= 3'b000;
    zext_ln7_reg_315[7] <= 1'b0;
end

endmodule //makeItZero
