// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        feature_0_V_address0,
        feature_0_V_ce0,
        feature_0_V_q0,
        feature_1_V_address0,
        feature_1_V_ce0,
        feature_1_V_q0,
        feature_2_V_address0,
        feature_2_V_ce0,
        feature_2_V_q0,
        feature_3_V_address0,
        feature_3_V_ce0,
        feature_3_V_q0,
        feature_4_V_address0,
        feature_4_V_ce0,
        feature_4_V_q0,
        feature_5_V_address0,
        feature_5_V_ce0,
        feature_5_V_q0,
        feature_V_offset,
        pool_feature_V_address0,
        pool_feature_V_ce0,
        pool_feature_V_we0,
        pool_feature_V_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] feature_0_V_address0;
output   feature_0_V_ce0;
input  [13:0] feature_0_V_q0;
output  [9:0] feature_1_V_address0;
output   feature_1_V_ce0;
input  [13:0] feature_1_V_q0;
output  [9:0] feature_2_V_address0;
output   feature_2_V_ce0;
input  [13:0] feature_2_V_q0;
output  [9:0] feature_3_V_address0;
output   feature_3_V_ce0;
input  [13:0] feature_3_V_q0;
output  [9:0] feature_4_V_address0;
output   feature_4_V_ce0;
input  [13:0] feature_4_V_q0;
output  [9:0] feature_5_V_address0;
output   feature_5_V_ce0;
input  [13:0] feature_5_V_q0;
input  [2:0] feature_V_offset;
output  [9:0] pool_feature_V_address0;
output   pool_feature_V_ce0;
output   pool_feature_V_we0;
output  [14:0] pool_feature_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg feature_0_V_ce0;
reg feature_1_V_ce0;
reg feature_2_V_ce0;
reg feature_3_V_ce0;
reg feature_4_V_ce0;
reg feature_5_V_ce0;
reg pool_feature_V_ce0;
reg pool_feature_V_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [8:0] sext_ln203_fu_262_p1;
reg  signed [8:0] sext_ln203_reg_512;
wire   [10:0] sub_ln203_1_fu_311_p2;
reg   [10:0] sub_ln203_1_reg_520;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln40_fu_266_p2;
wire   [4:0] r_fu_323_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln42_fu_317_p2;
wire   [1:0] pr_fu_339_p2;
reg   [1:0] pr_reg_536;
wire    ap_CS_fsm_state4;
wire   [10:0] sub_ln1494_fu_375_p2;
reg   [10:0] sub_ln1494_reg_541;
wire   [0:0] icmp_ln46_fu_333_p2;
wire   [4:0] c_fu_405_p2;
wire   [1:0] pc_fu_421_p2;
reg   [1:0] pc_reg_554;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln47_fu_415_p2;
wire   [14:0] select_ln49_fu_499_p3;
wire    ap_CS_fsm_state6;
reg   [4:0] r_0_reg_161;
reg   [4:0] c_0_reg_173;
reg   [14:0] pool_0_reg_185;
reg   [1:0] pr_0_reg_198;
reg   [14:0] pool_1_reg_209;
reg   [1:0] pc_0_reg_221;
wire   [63:0] zext_ln203_4_fu_400_p1;
wire  signed [63:0] sext_ln1494_fu_442_p1;
wire   [6:0] tmp_fu_232_p3;
wire   [4:0] tmp_2_fu_244_p3;
wire   [7:0] zext_ln203_fu_240_p1;
wire   [7:0] zext_ln203_1_fu_252_p1;
wire   [7:0] sub_ln203_fu_256_p2;
wire   [3:0] tmp_7_fu_272_p4;
wire   [8:0] zext_ln203_2_fu_282_p1;
wire   [8:0] add_ln203_fu_286_p2;
wire   [6:0] trunc_ln203_fu_291_p1;
wire   [10:0] p_shl2_cast_fu_295_p3;
wire   [10:0] p_shl3_cast_fu_303_p3;
wire   [4:0] zext_ln46_fu_329_p1;
wire   [4:0] add_ln49_fu_345_p2;
wire   [9:0] tmp_5_fu_351_p3;
wire   [7:0] tmp_6_fu_363_p3;
wire   [10:0] zext_ln1494_fu_359_p1;
wire   [10:0] zext_ln1494_2_fu_371_p1;
wire   [3:0] tmp_8_fu_381_p4;
wire   [10:0] zext_ln203_3_fu_391_p1;
wire   [10:0] add_ln203_1_fu_395_p2;
wire   [4:0] zext_ln47_fu_411_p1;
wire   [4:0] add_ln49_1_fu_427_p2;
wire   [10:0] zext_ln1494_3_fu_433_p1;
wire   [10:0] add_ln1494_fu_437_p2;
wire   [14:0] pool_V_fu_476_p1;
wire   [14:0] pool_V_fu_476_p2;
wire   [14:0] pool_V_fu_476_p3;
wire   [14:0] pool_V_fu_476_p4;
wire   [14:0] pool_V_fu_476_p5;
wire   [14:0] pool_V_fu_476_p6;
wire   [14:0] pool_V_fu_476_p8;
wire   [0:0] icmp_ln1494_fu_493_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

cnn_mux_63_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 15 ),
    .din3_WIDTH( 15 ),
    .din4_WIDTH( 15 ),
    .din5_WIDTH( 15 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 15 ))
cnn_mux_63_15_1_1_U11(
    .din0(pool_V_fu_476_p1),
    .din1(pool_V_fu_476_p2),
    .din2(pool_V_fu_476_p3),
    .din3(pool_V_fu_476_p4),
    .din4(pool_V_fu_476_p5),
    .din5(pool_V_fu_476_p6),
    .din6(feature_V_offset),
    .dout(pool_V_fu_476_p8)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_266_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_173 <= 5'd0;
    end else if (((icmp_ln46_fu_333_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        c_0_reg_173 <= c_fu_405_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        pc_0_reg_221 <= pc_reg_554;
    end else if (((icmp_ln46_fu_333_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        pc_0_reg_221 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_317_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        pool_0_reg_185 <= 15'd0;
    end else if (((icmp_ln47_fu_415_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        pool_0_reg_185 <= pool_1_reg_209;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        pool_1_reg_209 <= select_ln49_fu_499_p3;
    end else if (((icmp_ln46_fu_333_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        pool_1_reg_209 <= pool_0_reg_185;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_317_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        pr_0_reg_198 <= 2'd0;
    end else if (((icmp_ln47_fu_415_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        pr_0_reg_198 <= pr_reg_536;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_reg_161 <= r_fu_323_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_161 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        pc_reg_554 <= pc_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pr_reg_536 <= pr_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sext_ln203_reg_512[8 : 2] <= sext_ln203_fu_262_p1[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_333_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sub_ln1494_reg_541[10 : 3] <= sub_ln1494_fu_375_p2[10 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_266_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln203_1_reg_520[10 : 2] <= sub_ln203_1_fu_311_p2[10 : 2];
    end
end

always @ (*) begin
    if ((((icmp_ln40_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_0_V_ce0 = 1'b1;
    end else begin
        feature_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_1_V_ce0 = 1'b1;
    end else begin
        feature_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_2_V_ce0 = 1'b1;
    end else begin
        feature_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_3_V_ce0 = 1'b1;
    end else begin
        feature_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_4_V_ce0 = 1'b1;
    end else begin
        feature_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_5_V_ce0 = 1'b1;
    end else begin
        feature_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pool_feature_V_ce0 = 1'b1;
    end else begin
        pool_feature_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln46_fu_333_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        pool_feature_V_we0 = 1'b1;
    end else begin
        pool_feature_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln40_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln42_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln46_fu_333_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln47_fu_415_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1494_fu_437_p2 = (sub_ln1494_reg_541 + zext_ln1494_3_fu_433_p1);

assign add_ln203_1_fu_395_p2 = (sub_ln203_1_reg_520 + zext_ln203_3_fu_391_p1);

assign add_ln203_fu_286_p2 = ($signed(zext_ln203_2_fu_282_p1) + $signed(sext_ln203_reg_512));

assign add_ln49_1_fu_427_p2 = (zext_ln47_fu_411_p1 + c_0_reg_173);

assign add_ln49_fu_345_p2 = (zext_ln46_fu_329_p1 + r_0_reg_161);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign c_fu_405_p2 = (c_0_reg_173 + 5'd2);

assign feature_0_V_address0 = sext_ln1494_fu_442_p1;

assign feature_1_V_address0 = sext_ln1494_fu_442_p1;

assign feature_2_V_address0 = sext_ln1494_fu_442_p1;

assign feature_3_V_address0 = sext_ln1494_fu_442_p1;

assign feature_4_V_address0 = sext_ln1494_fu_442_p1;

assign feature_5_V_address0 = sext_ln1494_fu_442_p1;

assign icmp_ln1494_fu_493_p2 = (($signed(pool_V_fu_476_p8) > $signed(pool_1_reg_209)) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_266_p2 = ((r_0_reg_161 < 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_317_p2 = ((c_0_reg_173 < 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_333_p2 = ((pr_0_reg_198 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_415_p2 = ((pc_0_reg_221 == 2'd2) ? 1'b1 : 1'b0);

assign p_shl2_cast_fu_295_p3 = {{trunc_ln203_fu_291_p1}, {4'd0}};

assign p_shl3_cast_fu_303_p3 = {{add_ln203_fu_286_p2}, {2'd0}};

assign pc_fu_421_p2 = (pc_0_reg_221 + 2'd1);

assign pool_V_fu_476_p1 = feature_0_V_q0;

assign pool_V_fu_476_p2 = feature_1_V_q0;

assign pool_V_fu_476_p3 = feature_2_V_q0;

assign pool_V_fu_476_p4 = feature_3_V_q0;

assign pool_V_fu_476_p5 = feature_4_V_q0;

assign pool_V_fu_476_p6 = feature_5_V_q0;

assign pool_feature_V_address0 = zext_ln203_4_fu_400_p1;

assign pool_feature_V_d0 = pool_0_reg_185;

assign pr_fu_339_p2 = (pr_0_reg_198 + 2'd1);

assign r_fu_323_p2 = (r_0_reg_161 + 5'd2);

assign select_ln49_fu_499_p3 = ((icmp_ln1494_fu_493_p2[0:0] === 1'b1) ? pool_V_fu_476_p8 : pool_1_reg_209);

assign sext_ln1494_fu_442_p1 = $signed(add_ln1494_fu_437_p2);

assign sext_ln203_fu_262_p1 = $signed(sub_ln203_fu_256_p2);

assign sub_ln1494_fu_375_p2 = (zext_ln1494_fu_359_p1 - zext_ln1494_2_fu_371_p1);

assign sub_ln203_1_fu_311_p2 = (p_shl2_cast_fu_295_p3 - p_shl3_cast_fu_303_p3);

assign sub_ln203_fu_256_p2 = (zext_ln203_fu_240_p1 - zext_ln203_1_fu_252_p1);

assign tmp_2_fu_244_p3 = {{feature_V_offset}, {2'd0}};

assign tmp_5_fu_351_p3 = {{add_ln49_fu_345_p2}, {5'd0}};

assign tmp_6_fu_363_p3 = {{add_ln49_fu_345_p2}, {3'd0}};

assign tmp_7_fu_272_p4 = {{r_0_reg_161[4:1]}};

assign tmp_8_fu_381_p4 = {{c_0_reg_173[4:1]}};

assign tmp_fu_232_p3 = {{feature_V_offset}, {4'd0}};

assign trunc_ln203_fu_291_p1 = add_ln203_fu_286_p2[6:0];

assign zext_ln1494_2_fu_371_p1 = tmp_6_fu_363_p3;

assign zext_ln1494_3_fu_433_p1 = add_ln49_1_fu_427_p2;

assign zext_ln1494_fu_359_p1 = tmp_5_fu_351_p3;

assign zext_ln203_1_fu_252_p1 = tmp_2_fu_244_p3;

assign zext_ln203_2_fu_282_p1 = tmp_7_fu_272_p4;

assign zext_ln203_3_fu_391_p1 = tmp_8_fu_381_p4;

assign zext_ln203_4_fu_400_p1 = add_ln203_1_fu_395_p2;

assign zext_ln203_fu_240_p1 = tmp_fu_232_p3;

assign zext_ln46_fu_329_p1 = pr_0_reg_198;

assign zext_ln47_fu_411_p1 = pc_0_reg_221;

always @ (posedge ap_clk) begin
    sext_ln203_reg_512[1:0] <= 2'b00;
    sub_ln203_1_reg_520[1:0] <= 2'b00;
    sub_ln1494_reg_541[2:0] <= 3'b000;
end

endmodule //max_pool
