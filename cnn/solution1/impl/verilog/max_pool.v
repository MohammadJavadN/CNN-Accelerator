// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        feature_0_address0,
        feature_0_ce0,
        feature_0_q0,
        feature_1_address0,
        feature_1_ce0,
        feature_1_q0,
        feature_2_address0,
        feature_2_ce0,
        feature_2_q0,
        feature_3_address0,
        feature_3_ce0,
        feature_3_q0,
        feature_4_address0,
        feature_4_ce0,
        feature_4_q0,
        feature_5_address0,
        feature_5_ce0,
        feature_5_q0,
        feature_offset,
        pool_feature_address0,
        pool_feature_ce0,
        pool_feature_we0,
        pool_feature_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] feature_0_address0;
output   feature_0_ce0;
input  [31:0] feature_0_q0;
output  [9:0] feature_1_address0;
output   feature_1_ce0;
input  [31:0] feature_1_q0;
output  [9:0] feature_2_address0;
output   feature_2_ce0;
input  [31:0] feature_2_q0;
output  [9:0] feature_3_address0;
output   feature_3_ce0;
input  [31:0] feature_3_q0;
output  [9:0] feature_4_address0;
output   feature_4_ce0;
input  [31:0] feature_4_q0;
output  [9:0] feature_5_address0;
output   feature_5_ce0;
input  [31:0] feature_5_q0;
input  [2:0] feature_offset;
output  [9:0] pool_feature_address0;
output   pool_feature_ce0;
output   pool_feature_we0;
output  [31:0] pool_feature_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg feature_0_ce0;
reg feature_1_ce0;
reg feature_2_ce0;
reg feature_3_ce0;
reg feature_4_ce0;
reg feature_5_ce0;
reg pool_feature_ce0;
reg pool_feature_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [8:0] sext_ln55_fu_277_p1;
reg  signed [8:0] sext_ln55_reg_582;
wire   [10:0] sub_ln55_1_fu_326_p2;
reg   [10:0] sub_ln55_1_reg_590;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln42_fu_281_p2;
wire   [4:0] r_fu_338_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln44_fu_332_p2;
wire   [1:0] pr_fu_354_p2;
reg   [1:0] pr_reg_606;
wire    ap_CS_fsm_state4;
wire   [10:0] sub_ln51_fu_390_p2;
reg   [10:0] sub_ln51_reg_611;
wire   [0:0] icmp_ln48_fu_348_p2;
wire   [4:0] c_fu_420_p2;
wire   [1:0] pc_fu_436_p2;
reg   [1:0] pc_reg_624;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln49_fu_430_p2;
wire   [31:0] pool_3_fu_569_p3;
wire    ap_CS_fsm_state6;
reg   [4:0] r_0_reg_171;
reg   [4:0] c_0_reg_183;
reg   [31:0] pool_0_reg_195;
reg   [1:0] pr_0_reg_208;
reg   [31:0] pool_1_reg_219;
reg   [1:0] pc_0_reg_231;
wire   [63:0] zext_ln55_4_fu_415_p1;
wire  signed [63:0] sext_ln51_fu_457_p1;
wire   [31:0] pool_fu_467_p8;
wire   [6:0] tmp_fu_247_p3;
wire   [4:0] tmp_9_fu_259_p3;
wire   [7:0] zext_ln55_fu_255_p1;
wire   [7:0] zext_ln55_1_fu_267_p1;
wire   [7:0] sub_ln55_fu_271_p2;
wire   [3:0] tmp_10_fu_287_p4;
wire   [8:0] zext_ln55_2_fu_297_p1;
wire   [8:0] add_ln55_fu_301_p2;
wire   [6:0] trunc_ln55_fu_306_p1;
wire   [10:0] p_shl2_cast_fu_310_p3;
wire   [10:0] p_shl3_cast_fu_318_p3;
wire   [4:0] zext_ln48_fu_344_p1;
wire   [4:0] add_ln51_fu_360_p2;
wire   [9:0] tmp_s_fu_366_p3;
wire   [7:0] tmp_1_fu_378_p3;
wire   [10:0] zext_ln51_fu_374_p1;
wire   [10:0] zext_ln51_1_fu_386_p1;
wire   [3:0] tmp_11_fu_396_p4;
wire   [10:0] zext_ln55_3_fu_406_p1;
wire   [10:0] add_ln55_1_fu_410_p2;
wire   [4:0] zext_ln49_fu_426_p1;
wire   [4:0] add_ln51_1_fu_442_p2;
wire   [10:0] zext_ln51_2_fu_448_p1;
wire   [10:0] add_ln51_2_fu_452_p2;
wire   [31:0] bitcast_ln51_fu_485_p1;
wire   [31:0] bitcast_ln51_1_fu_503_p1;
wire   [7:0] tmp_6_fu_489_p4;
wire   [22:0] trunc_ln51_fu_499_p1;
wire   [0:0] icmp_ln51_1_fu_527_p2;
wire   [0:0] icmp_ln51_fu_521_p2;
wire   [7:0] tmp_7_fu_507_p4;
wire   [22:0] trunc_ln51_1_fu_517_p1;
wire   [0:0] icmp_ln51_3_fu_545_p2;
wire   [0:0] icmp_ln51_2_fu_539_p2;
wire   [0:0] or_ln51_fu_533_p2;
wire   [0:0] or_ln51_1_fu_551_p2;
wire   [0:0] and_ln51_fu_557_p2;
wire   [0:0] tmp_8_fu_242_p2;
wire   [0:0] and_ln51_1_fu_563_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

cnn_fcmp_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32nbkb_U1(
    .din0(pool_fu_467_p8),
    .din1(pool_1_reg_219),
    .opcode(5'd2),
    .dout(tmp_8_fu_242_p2)
);

cnn_mux_63_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
cnn_mux_63_32_1_1_U2(
    .din0(feature_0_q0),
    .din1(feature_1_q0),
    .din2(feature_2_q0),
    .din3(feature_3_q0),
    .din4(feature_4_q0),
    .din5(feature_5_q0),
    .din6(feature_offset),
    .dout(pool_fu_467_p8)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_281_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_183 <= 5'd0;
    end else if (((icmp_ln48_fu_348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        c_0_reg_183 <= c_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_348_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        pc_0_reg_231 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        pc_0_reg_231 <= pc_reg_624;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_fu_332_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        pool_0_reg_195 <= 32'd8388608;
    end else if (((icmp_ln49_fu_430_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        pool_0_reg_195 <= pool_1_reg_219;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_348_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        pool_1_reg_219 <= pool_0_reg_195;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        pool_1_reg_219 <= pool_3_fu_569_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_fu_332_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        pr_0_reg_208 <= 2'd0;
    end else if (((icmp_ln49_fu_430_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        pr_0_reg_208 <= pr_reg_606;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_reg_171 <= r_fu_338_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_171 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        pc_reg_624 <= pc_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pr_reg_606 <= pr_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sext_ln55_reg_582[8 : 2] <= sext_ln55_fu_277_p1[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_348_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sub_ln51_reg_611[10 : 3] <= sub_ln51_fu_390_p2[10 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_281_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln55_1_reg_590[10 : 2] <= sub_ln55_1_fu_326_p2[10 : 2];
    end
end

always @ (*) begin
    if ((((icmp_ln42_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln42_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_0_ce0 = 1'b1;
    end else begin
        feature_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_1_ce0 = 1'b1;
    end else begin
        feature_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_2_ce0 = 1'b1;
    end else begin
        feature_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_3_ce0 = 1'b1;
    end else begin
        feature_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_4_ce0 = 1'b1;
    end else begin
        feature_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_5_ce0 = 1'b1;
    end else begin
        feature_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pool_feature_ce0 = 1'b1;
    end else begin
        pool_feature_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        pool_feature_we0 = 1'b1;
    end else begin
        pool_feature_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln42_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln44_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln48_fu_348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln49_fu_430_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln51_1_fu_442_p2 = (zext_ln49_fu_426_p1 + c_0_reg_183);

assign add_ln51_2_fu_452_p2 = (sub_ln51_reg_611 + zext_ln51_2_fu_448_p1);

assign add_ln51_fu_360_p2 = (zext_ln48_fu_344_p1 + r_0_reg_171);

assign add_ln55_1_fu_410_p2 = (sub_ln55_1_reg_590 + zext_ln55_3_fu_406_p1);

assign add_ln55_fu_301_p2 = ($signed(zext_ln55_2_fu_297_p1) + $signed(sext_ln55_reg_582));

assign and_ln51_1_fu_563_p2 = (tmp_8_fu_242_p2 & and_ln51_fu_557_p2);

assign and_ln51_fu_557_p2 = (or_ln51_fu_533_p2 & or_ln51_1_fu_551_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign bitcast_ln51_1_fu_503_p1 = pool_1_reg_219;

assign bitcast_ln51_fu_485_p1 = pool_fu_467_p8;

assign c_fu_420_p2 = (c_0_reg_183 + 5'd2);

assign feature_0_address0 = sext_ln51_fu_457_p1;

assign feature_1_address0 = sext_ln51_fu_457_p1;

assign feature_2_address0 = sext_ln51_fu_457_p1;

assign feature_3_address0 = sext_ln51_fu_457_p1;

assign feature_4_address0 = sext_ln51_fu_457_p1;

assign feature_5_address0 = sext_ln51_fu_457_p1;

assign icmp_ln42_fu_281_p2 = ((r_0_reg_171 < 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_332_p2 = ((c_0_reg_183 < 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_348_p2 = ((pr_0_reg_208 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_430_p2 = ((pc_0_reg_231 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln51_1_fu_527_p2 = ((trunc_ln51_fu_499_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln51_2_fu_539_p2 = ((tmp_7_fu_507_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln51_3_fu_545_p2 = ((trunc_ln51_1_fu_517_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_521_p2 = ((tmp_6_fu_489_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln51_1_fu_551_p2 = (icmp_ln51_3_fu_545_p2 | icmp_ln51_2_fu_539_p2);

assign or_ln51_fu_533_p2 = (icmp_ln51_fu_521_p2 | icmp_ln51_1_fu_527_p2);

assign p_shl2_cast_fu_310_p3 = {{trunc_ln55_fu_306_p1}, {4'd0}};

assign p_shl3_cast_fu_318_p3 = {{add_ln55_fu_301_p2}, {2'd0}};

assign pc_fu_436_p2 = (pc_0_reg_231 + 2'd1);

assign pool_3_fu_569_p3 = ((and_ln51_1_fu_563_p2[0:0] === 1'b1) ? pool_fu_467_p8 : pool_1_reg_219);

assign pool_feature_address0 = zext_ln55_4_fu_415_p1;

assign pool_feature_d0 = pool_0_reg_195;

assign pr_fu_354_p2 = (pr_0_reg_208 + 2'd1);

assign r_fu_338_p2 = (r_0_reg_171 + 5'd2);

assign sext_ln51_fu_457_p1 = $signed(add_ln51_2_fu_452_p2);

assign sext_ln55_fu_277_p1 = $signed(sub_ln55_fu_271_p2);

assign sub_ln51_fu_390_p2 = (zext_ln51_fu_374_p1 - zext_ln51_1_fu_386_p1);

assign sub_ln55_1_fu_326_p2 = (p_shl2_cast_fu_310_p3 - p_shl3_cast_fu_318_p3);

assign sub_ln55_fu_271_p2 = (zext_ln55_fu_255_p1 - zext_ln55_1_fu_267_p1);

assign tmp_10_fu_287_p4 = {{r_0_reg_171[4:1]}};

assign tmp_11_fu_396_p4 = {{c_0_reg_183[4:1]}};

assign tmp_1_fu_378_p3 = {{add_ln51_fu_360_p2}, {3'd0}};

assign tmp_6_fu_489_p4 = {{bitcast_ln51_fu_485_p1[30:23]}};

assign tmp_7_fu_507_p4 = {{bitcast_ln51_1_fu_503_p1[30:23]}};

assign tmp_9_fu_259_p3 = {{feature_offset}, {2'd0}};

assign tmp_fu_247_p3 = {{feature_offset}, {4'd0}};

assign tmp_s_fu_366_p3 = {{add_ln51_fu_360_p2}, {5'd0}};

assign trunc_ln51_1_fu_517_p1 = bitcast_ln51_1_fu_503_p1[22:0];

assign trunc_ln51_fu_499_p1 = bitcast_ln51_fu_485_p1[22:0];

assign trunc_ln55_fu_306_p1 = add_ln55_fu_301_p2[6:0];

assign zext_ln48_fu_344_p1 = pr_0_reg_208;

assign zext_ln49_fu_426_p1 = pc_0_reg_231;

assign zext_ln51_1_fu_386_p1 = tmp_1_fu_378_p3;

assign zext_ln51_2_fu_448_p1 = add_ln51_1_fu_442_p2;

assign zext_ln51_fu_374_p1 = tmp_s_fu_366_p3;

assign zext_ln55_1_fu_267_p1 = tmp_9_fu_259_p3;

assign zext_ln55_2_fu_297_p1 = tmp_10_fu_287_p4;

assign zext_ln55_3_fu_406_p1 = tmp_11_fu_396_p4;

assign zext_ln55_4_fu_415_p1 = add_ln55_1_fu_410_p2;

assign zext_ln55_fu_255_p1 = tmp_fu_247_p3;

always @ (posedge ap_clk) begin
    sext_ln55_reg_582[1:0] <= 2'b00;
    sub_ln55_1_reg_590[1:0] <= 2'b00;
    sub_ln51_reg_611[2:0] <= 3'b000;
end

endmodule //max_pool
