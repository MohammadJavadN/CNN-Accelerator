// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module normalization (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_in_V_dout,
        img_in_V_empty_n,
        img_in_V_read,
        img_out_V_V_din,
        img_out_V_V_full_n,
        img_out_V_V_write
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_state9 = 28'd256;
parameter    ap_ST_fsm_state10 = 28'd512;
parameter    ap_ST_fsm_state11 = 28'd1024;
parameter    ap_ST_fsm_state12 = 28'd2048;
parameter    ap_ST_fsm_state13 = 28'd4096;
parameter    ap_ST_fsm_state14 = 28'd8192;
parameter    ap_ST_fsm_state15 = 28'd16384;
parameter    ap_ST_fsm_state16 = 28'd32768;
parameter    ap_ST_fsm_state17 = 28'd65536;
parameter    ap_ST_fsm_state18 = 28'd131072;
parameter    ap_ST_fsm_state19 = 28'd262144;
parameter    ap_ST_fsm_state20 = 28'd524288;
parameter    ap_ST_fsm_state21 = 28'd1048576;
parameter    ap_ST_fsm_state22 = 28'd2097152;
parameter    ap_ST_fsm_state23 = 28'd4194304;
parameter    ap_ST_fsm_state24 = 28'd8388608;
parameter    ap_ST_fsm_state25 = 28'd16777216;
parameter    ap_ST_fsm_state26 = 28'd33554432;
parameter    ap_ST_fsm_state27 = 28'd67108864;
parameter    ap_ST_fsm_state28 = 28'd134217728;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] img_in_V_dout;
input   img_in_V_empty_n;
output   img_in_V_read;
output  [13:0] img_out_V_V_din;
input   img_out_V_V_full_n;
output   img_out_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_in_V_read;
reg img_out_V_V_write;

(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    img_in_V_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln19_fu_120_p2;
reg    img_out_V_V_blk_n;
wire    ap_CS_fsm_state28;
wire   [4:0] r_fu_114_p2;
reg   [4:0] r_reg_408;
wire    ap_CS_fsm_state2;
wire   [4:0] c_fu_126_p2;
reg   [4:0] c_reg_416;
reg    ap_block_state3;
wire   [63:0] grp_fu_99_p1;
reg   [63:0] tmp_5_reg_426;
wire    ap_CS_fsm_state4;
wire   [63:0] grp_fu_103_p2;
reg   [63:0] v_assign_reg_431;
wire    ap_CS_fsm_state26;
wire   [53:0] man_V_4_fu_183_p3;
reg   [53:0] man_V_4_reg_436;
wire    ap_CS_fsm_state27;
wire  signed [11:0] sh_amt_fu_221_p3;
reg  signed [11:0] sh_amt_reg_441;
wire   [13:0] trunc_ln583_fu_235_p1;
reg   [13:0] trunc_ln583_reg_446;
wire   [0:0] and_ln603_fu_327_p2;
reg   [0:0] and_ln603_reg_451;
wire   [0:0] or_ln603_fu_333_p2;
reg   [0:0] or_ln603_reg_456;
wire   [13:0] select_ln603_4_fu_339_p3;
reg   [13:0] select_ln603_4_reg_461;
wire   [0:0] or_ln603_4_fu_353_p2;
reg   [0:0] or_ln603_4_reg_466;
reg   [4:0] r_0_reg_77;
reg   [4:0] c_0_reg_88;
wire   [0:0] icmp_ln18_fu_108_p2;
wire    ap_CS_fsm_state5;
wire   [63:0] ireg_V_fu_132_p1;
wire   [10:0] exp_tmp_V_fu_147_p4;
wire   [51:0] trunc_ln565_fu_161_p1;
wire   [52:0] tmp_2_fu_165_p3;
wire   [53:0] p_Result_2_fu_173_p1;
wire   [0:0] p_Result_s_fu_139_p3;
wire   [53:0] man_V_3_fu_177_p2;
wire   [62:0] trunc_ln556_fu_135_p1;
wire   [11:0] zext_ln461_fu_157_p1;
wire   [11:0] F2_fu_197_p2;
wire   [0:0] icmp_ln581_fu_203_p2;
wire   [11:0] add_ln581_fu_209_p2;
wire   [11:0] sub_ln581_fu_215_p2;
wire   [0:0] tmp_7_fu_251_p3;
wire   [0:0] icmp_ln571_fu_191_p2;
wire   [0:0] icmp_ln582_fu_229_p2;
wire   [0:0] xor_ln571_fu_267_p2;
wire   [0:0] or_ln582_fu_279_p2;
wire   [0:0] xor_ln582_fu_285_p2;
wire   [0:0] icmp_ln585_fu_239_p2;
wire   [0:0] and_ln581_fu_291_p2;
wire   [0:0] xor_ln585_fu_297_p2;
wire   [0:0] or_ln581_fu_315_p2;
wire   [0:0] icmp_ln603_fu_245_p2;
wire   [0:0] xor_ln581_fu_321_p2;
wire   [0:0] and_ln585_2_fu_309_p2;
wire   [0:0] and_ln585_fu_303_p2;
wire   [13:0] select_ln588_fu_259_p3;
wire   [0:0] and_ln582_fu_273_p2;
wire   [0:0] or_ln603_3_fu_347_p2;
wire  signed [31:0] sext_ln581_fu_359_p1;
wire   [53:0] zext_ln586_fu_362_p1;
wire   [53:0] ashr_ln586_fu_366_p2;
wire   [13:0] sext_ln581cast_fu_375_p1;
wire   [13:0] shl_ln604_fu_379_p2;
wire   [13:0] trunc_ln586_fu_371_p1;
wire   [13:0] select_ln603_fu_384_p3;
wire   [13:0] select_ln603_5_fu_391_p3;
reg    grp_fu_99_ce;
reg   [27:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
end

cnn_fpext_32ns_64bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
cnn_fpext_32ns_64bkb_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(img_in_V_dout),
    .ce(grp_fu_99_ce),
    .dout(grp_fu_99_p1)
);

cnn_ddiv_64ns_64ncud #(
    .ID( 1 ),
    .NUM_STAGE( 22 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
cnn_ddiv_64ns_64ncud_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_reg_426),
    .din1(64'd4643176031446892544),
    .ce(1'b1),
    .dout(grp_fu_103_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_108_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_88 <= 5'd0;
    end else if (((img_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        c_0_reg_88 <= c_reg_416;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln19_fu_120_p2 == 1'd0) & (img_in_V_empty_n == 1'b0)) & (icmp_ln19_fu_120_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_reg_77 <= r_reg_408;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_77 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        and_ln603_reg_451 <= and_ln603_fu_327_p2;
        man_V_4_reg_436 <= man_V_4_fu_183_p3;
        or_ln603_4_reg_466 <= or_ln603_4_fu_353_p2;
        or_ln603_reg_456 <= or_ln603_fu_333_p2;
        select_ln603_4_reg_461 <= select_ln603_4_fu_339_p3;
        sh_amt_reg_441 <= sh_amt_fu_221_p3;
        trunc_ln583_reg_446 <= trunc_ln583_fu_235_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln19_fu_120_p2 == 1'd0) & (img_in_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        c_reg_416 <= c_fu_126_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_408 <= r_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_5_reg_426 <= grp_fu_99_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        v_assign_reg_431 <= grp_fu_103_p2;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln18_fu_108_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln18_fu_108_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (~((icmp_ln19_fu_120_p2 == 1'd0) & (img_in_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        grp_fu_99_ce = 1'b1;
    end else begin
        grp_fu_99_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        img_in_V_blk_n = img_in_V_empty_n;
    end else begin
        img_in_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln19_fu_120_p2 == 1'd0) & (img_in_V_empty_n == 1'b0)) & (icmp_ln19_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        img_in_V_read = 1'b1;
    end else begin
        img_in_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        img_out_V_V_blk_n = img_out_V_V_full_n;
    end else begin
        img_out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((img_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        img_out_V_V_write = 1'b1;
    end else begin
        img_out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln18_fu_108_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((icmp_ln19_fu_120_p2 == 1'd0) & (img_in_V_empty_n == 1'b0)) & (icmp_ln19_fu_120_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln19_fu_120_p2 == 1'd0) & (img_in_V_empty_n == 1'b0)) & (icmp_ln19_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((img_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_197_p2 = (12'd1075 - zext_ln461_fu_157_p1);

assign add_ln581_fu_209_p2 = ($signed(12'd4088) + $signed(F2_fu_197_p2));

assign and_ln581_fu_291_p2 = (xor_ln582_fu_285_p2 & icmp_ln581_fu_203_p2);

assign and_ln582_fu_273_p2 = (xor_ln571_fu_267_p2 & icmp_ln582_fu_229_p2);

assign and_ln585_2_fu_309_p2 = (icmp_ln585_fu_239_p2 & and_ln581_fu_291_p2);

assign and_ln585_fu_303_p2 = (xor_ln585_fu_297_p2 & and_ln581_fu_291_p2);

assign and_ln603_fu_327_p2 = (xor_ln581_fu_321_p2 & icmp_ln603_fu_245_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state3 = ((icmp_ln19_fu_120_p2 == 1'd0) & (img_in_V_empty_n == 1'b0));
end

assign ashr_ln586_fu_366_p2 = $signed(man_V_4_reg_436) >>> zext_ln586_fu_362_p1;

assign c_fu_126_p2 = (c_0_reg_88 + 5'd1);

assign exp_tmp_V_fu_147_p4 = {{ireg_V_fu_132_p1[62:52]}};

assign icmp_ln18_fu_108_p2 = ((r_0_reg_77 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_120_p2 = ((c_0_reg_88 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_191_p2 = ((trunc_ln556_fu_135_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_203_p2 = (($signed(F2_fu_197_p2) > $signed(12'd8)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_229_p2 = ((F2_fu_197_p2 == 12'd8) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_239_p2 = ((sh_amt_fu_221_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_245_p2 = ((sh_amt_fu_221_p3 < 12'd14) ? 1'b1 : 1'b0);

assign img_out_V_V_din = ((or_ln603_4_reg_466[0:0] === 1'b1) ? select_ln603_5_fu_391_p3 : 14'd0);

assign ireg_V_fu_132_p1 = v_assign_reg_431;

assign man_V_3_fu_177_p2 = (54'd0 - p_Result_2_fu_173_p1);

assign man_V_4_fu_183_p3 = ((p_Result_s_fu_139_p3[0:0] === 1'b1) ? man_V_3_fu_177_p2 : p_Result_2_fu_173_p1);

assign or_ln581_fu_315_p2 = (or_ln582_fu_279_p2 | icmp_ln581_fu_203_p2);

assign or_ln582_fu_279_p2 = (icmp_ln582_fu_229_p2 | icmp_ln571_fu_191_p2);

assign or_ln603_3_fu_347_p2 = (and_ln585_fu_303_p2 | and_ln582_fu_273_p2);

assign or_ln603_4_fu_353_p2 = (or_ln603_fu_333_p2 | or_ln603_3_fu_347_p2);

assign or_ln603_fu_333_p2 = (and_ln603_fu_327_p2 | and_ln585_2_fu_309_p2);

assign p_Result_2_fu_173_p1 = tmp_2_fu_165_p3;

assign p_Result_s_fu_139_p3 = ireg_V_fu_132_p1[32'd63];

assign r_fu_114_p2 = (r_0_reg_77 + 5'd1);

assign select_ln588_fu_259_p3 = ((tmp_7_fu_251_p3[0:0] === 1'b1) ? 14'd16383 : 14'd0);

assign select_ln603_4_fu_339_p3 = ((and_ln585_fu_303_p2[0:0] === 1'b1) ? select_ln588_fu_259_p3 : trunc_ln583_fu_235_p1);

assign select_ln603_5_fu_391_p3 = ((or_ln603_reg_456[0:0] === 1'b1) ? select_ln603_fu_384_p3 : select_ln603_4_reg_461);

assign select_ln603_fu_384_p3 = ((and_ln603_reg_451[0:0] === 1'b1) ? shl_ln604_fu_379_p2 : trunc_ln586_fu_371_p1);

assign sext_ln581_fu_359_p1 = sh_amt_reg_441;

assign sext_ln581cast_fu_375_p1 = sext_ln581_fu_359_p1[13:0];

assign sh_amt_fu_221_p3 = ((icmp_ln581_fu_203_p2[0:0] === 1'b1) ? add_ln581_fu_209_p2 : sub_ln581_fu_215_p2);

assign shl_ln604_fu_379_p2 = trunc_ln583_reg_446 << sext_ln581cast_fu_375_p1;

assign sub_ln581_fu_215_p2 = (12'd8 - F2_fu_197_p2);

assign tmp_2_fu_165_p3 = {{1'd1}, {trunc_ln565_fu_161_p1}};

assign tmp_7_fu_251_p3 = ireg_V_fu_132_p1[32'd63];

assign trunc_ln556_fu_135_p1 = ireg_V_fu_132_p1[62:0];

assign trunc_ln565_fu_161_p1 = ireg_V_fu_132_p1[51:0];

assign trunc_ln583_fu_235_p1 = man_V_4_fu_183_p3[13:0];

assign trunc_ln586_fu_371_p1 = ashr_ln586_fu_366_p2[13:0];

assign xor_ln571_fu_267_p2 = (icmp_ln571_fu_191_p2 ^ 1'd1);

assign xor_ln581_fu_321_p2 = (or_ln581_fu_315_p2 ^ 1'd1);

assign xor_ln582_fu_285_p2 = (or_ln582_fu_279_p2 ^ 1'd1);

assign xor_ln585_fu_297_p2 = (icmp_ln585_fu_239_p2 ^ 1'd1);

assign zext_ln461_fu_157_p1 = exp_tmp_V_fu_147_p4;

assign zext_ln586_fu_362_p1 = $unsigned(sext_ln581_fu_359_p1);

endmodule //normalization
