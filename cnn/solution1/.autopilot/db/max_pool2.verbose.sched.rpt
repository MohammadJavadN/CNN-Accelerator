

================================================================
== Vivado HLS Report for 'max_pool2'
================================================================
* Date:           Thu Apr 13 01:11:48 2023

* Version:        2019.1 (Build 2552052 on Fri May 24 15:28:33 MDT 2019)
* Project:        cnn
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020i-clg484-1L


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+--------+----------+------------+
    |  Clock | Target | Estimated| Uncertainty|
    +--------+--------+----------+------------+
    |ap_clk  |  100.00|    39.244|        0.12|
    +--------+--------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |  233|  233|  233|  233|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +---------------------+-----+-----+----------+-----------+-----------+------+----------+
        |                     |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        |      Loop Name      | min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +---------------------+-----+-----+----------+-----------+-----------+------+----------+
        |- Loop 1             |  232|  232|        58|          -|          -|     4|    no    |
        | + Loop 1.1          |   56|   56|        14|          -|          -|     4|    no    |
        |  ++ Loop 1.1.1      |   12|   12|         6|          -|          -|     2|    no    |
        |   +++ Loop 1.1.1.1  |    4|    4|         2|          -|          -|     2|    no    |
        +---------------------+-----+-----+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 6
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 2 
4 --> 5 3 
5 --> 6 4 
6 --> 5 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.76>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%b_read = call float @_ssdm_op_Read.ap_auto.float(float %b)" [lib/pool.cpp:7]   --->   Operation 7 'read' 'b_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%feature_offset_read = call i4 @_ssdm_op_Read.ap_auto.i4(i4 %feature_offset)" [lib/pool.cpp:7]   --->   Operation 8 'read' 'feature_offset_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (1.76ns)   --->   "br label %1" [lib/pool.cpp:13]   --->   Operation 9 'br' <Predicate = true> <Delay = 1.76>

State 2 <SV = 1> <Delay = 1.76>
ST_2 : Operation 10 [1/1] (0.00ns)   --->   "%r_0 = phi i4 [ 0, %0 ], [ %r, %3 ]"   --->   Operation 10 'phi' 'r_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 11 [1/1] (0.00ns)   --->   "%tmp_7 = call i1 @_ssdm_op_BitSelect.i1.i4.i32(i4 %r_0, i32 3)" [lib/pool.cpp:13]   --->   Operation 11 'bitselect' 'tmp_7' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 12 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)"   --->   Operation 12 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 13 [1/1] (0.00ns)   --->   "br i1 %tmp_7, label %4, label %.preheader2.preheader" [lib/pool.cpp:13]   --->   Operation 13 'br' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 14 [1/1] (0.00ns)   --->   "%trunc_ln26_1 = call i2 @_ssdm_op_PartSelect.i2.i4.i32.i32(i4 %r_0, i32 1, i32 2)" [lib/pool.cpp:26]   --->   Operation 14 'partselect' 'trunc_ln26_1' <Predicate = (!tmp_7)> <Delay = 0.00>
ST_2 : Operation 15 [1/1] (1.76ns)   --->   "br label %.preheader2" [lib/pool.cpp:15]   --->   Operation 15 'br' <Predicate = (!tmp_7)> <Delay = 1.76>
ST_2 : Operation 16 [1/1] (0.00ns)   --->   "ret void" [lib/pool.cpp:29]   --->   Operation 16 'ret' <Predicate = (tmp_7)> <Delay = 0.00>

State 3 <SV = 2> <Delay = 1.76>
ST_3 : Operation 17 [1/1] (0.00ns)   --->   "%c_0 = phi i4 [ %c, %2 ], [ 0, %.preheader2.preheader ]"   --->   Operation 17 'phi' 'c_0' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 18 [1/1] (0.00ns)   --->   "%tmp_8 = call i1 @_ssdm_op_BitSelect.i1.i4.i32(i4 %c_0, i32 3)" [lib/pool.cpp:15]   --->   Operation 18 'bitselect' 'tmp_8' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 19 [1/1] (0.00ns)   --->   "%empty_10 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)"   --->   Operation 19 'speclooptripcount' 'empty_10' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 20 [1/1] (0.00ns)   --->   "br i1 %tmp_8, label %3, label %.preheader1.preheader" [lib/pool.cpp:15]   --->   Operation 20 'br' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 21 [1/1] (1.76ns)   --->   "br label %.preheader1" [lib/pool.cpp:19]   --->   Operation 21 'br' <Predicate = (!tmp_8)> <Delay = 1.76>
ST_3 : Operation 22 [1/1] (1.73ns)   --->   "%r = add i4 %r_0, 2" [lib/pool.cpp:13]   --->   Operation 22 'add' 'r' <Predicate = (tmp_8)> <Delay = 1.73> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 23 [1/1] (0.00ns)   --->   "br label %1" [lib/pool.cpp:13]   --->   Operation 23 'br' <Predicate = (tmp_8)> <Delay = 0.00>

State 4 <SV = 3> <Delay = 39.2>
ST_4 : Operation 24 [1/1] (0.00ns)   --->   "%pool_0 = phi float [ %pool_1, %.preheader1.loopexit ], [ 0x3810000000000000, %.preheader1.preheader ]" [lib/pool.cpp:22]   --->   Operation 24 'phi' 'pool_0' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 25 [1/1] (0.00ns)   --->   "%pr_0 = phi i2 [ %pr, %.preheader1.loopexit ], [ 0, %.preheader1.preheader ]"   --->   Operation 25 'phi' 'pr_0' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 26 [1/1] (0.00ns)   --->   "%zext_ln19 = zext i2 %pr_0 to i4" [lib/pool.cpp:19]   --->   Operation 26 'zext' 'zext_ln19' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 27 [1/1] (0.95ns)   --->   "%icmp_ln19 = icmp eq i2 %pr_0, -2" [lib/pool.cpp:19]   --->   Operation 27 'icmp' 'icmp_ln19' <Predicate = true> <Delay = 0.95> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.44> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 28 [1/1] (0.00ns)   --->   "%empty_11 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 2, i64 2, i64 2)"   --->   Operation 28 'speclooptripcount' 'empty_11' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 29 [1/1] (1.56ns)   --->   "%pr = add i2 %pr_0, 1" [lib/pool.cpp:19]   --->   Operation 29 'add' 'pr' <Predicate = true> <Delay = 1.56> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 30 [1/1] (0.00ns)   --->   "br i1 %icmp_ln19, label %2, label %.preheader.preheader" [lib/pool.cpp:19]   --->   Operation 30 'br' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 31 [1/1] (1.73ns)   --->   "%add_ln22 = add i4 %r_0, %zext_ln19" [lib/pool.cpp:22]   --->   Operation 31 'add' 'add_ln22' <Predicate = (!icmp_ln19)> <Delay = 1.73> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 32 [1/1] (0.00ns)   --->   "%tmp_6 = call i7 @_ssdm_op_BitConcatenate.i7.i4.i3(i4 %add_ln22, i3 0)" [lib/pool.cpp:22]   --->   Operation 32 'bitconcatenate' 'tmp_6' <Predicate = (!icmp_ln19)> <Delay = 0.00>
ST_4 : Operation 33 [1/1] (0.00ns)   --->   "%zext_ln20_1 = zext i7 %tmp_6 to i8" [lib/pool.cpp:20]   --->   Operation 33 'zext' 'zext_ln20_1' <Predicate = (!icmp_ln19)> <Delay = 0.00>
ST_4 : Operation 34 [1/1] (1.76ns)   --->   "br label %.preheader" [lib/pool.cpp:20]   --->   Operation 34 'br' <Predicate = (!icmp_ln19)> <Delay = 1.76>
ST_4 : Operation 35 [1/1] (28.2ns)   --->   "%x_assign = fadd float %pool_0, %b_read" [lib/pool.cpp:26]   --->   Operation 35 'fadd' 'x_assign' <Predicate = (icmp_ln19)> <Delay = 28.2> <Core = "FAddSub">   --->   Core 105 'FAddSub' <Latency = 0> <II = 1> <Delay = 28.2> <FuncUnit> <Opcode : 'fadd' 'fsub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 36 [1/1] (0.00ns)   --->   "%bitcast_ln5 = bitcast float %x_assign to i32" [lib/activ_fun.cpp:5->lib/pool.cpp:26]   --->   Operation 36 'bitcast' 'bitcast_ln5' <Predicate = (icmp_ln19)> <Delay = 0.00>
ST_4 : Operation 37 [1/1] (0.00ns)   --->   "%tmp = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %bitcast_ln5, i32 23, i32 30)" [lib/activ_fun.cpp:5->lib/pool.cpp:26]   --->   Operation 37 'partselect' 'tmp' <Predicate = (icmp_ln19)> <Delay = 0.00>
ST_4 : Operation 38 [1/1] (0.00ns)   --->   "%trunc_ln5 = trunc i32 %bitcast_ln5 to i23" [lib/activ_fun.cpp:5->lib/pool.cpp:26]   --->   Operation 38 'trunc' 'trunc_ln5' <Predicate = (icmp_ln19)> <Delay = 0.00>
ST_4 : Operation 39 [1/1] (1.55ns)   --->   "%icmp_ln5 = icmp ne i8 %tmp, -1" [lib/activ_fun.cpp:5->lib/pool.cpp:26]   --->   Operation 39 'icmp' 'icmp_ln5' <Predicate = (icmp_ln19)> <Delay = 1.55> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.44> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 40 [1/1] (2.44ns)   --->   "%icmp_ln5_1 = icmp eq i23 %trunc_ln5, 0" [lib/activ_fun.cpp:5->lib/pool.cpp:26]   --->   Operation 40 'icmp' 'icmp_ln5_1' <Predicate = (icmp_ln19)> <Delay = 2.44> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.44> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 41 [1/1] (0.00ns) (grouped into LUT with out node select_ln5)   --->   "%or_ln5 = or i1 %icmp_ln5_1, %icmp_ln5" [lib/activ_fun.cpp:5->lib/pool.cpp:26]   --->   Operation 41 'or' 'or_ln5' <Predicate = (icmp_ln19)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 42 [1/1] (6.78ns)   --->   "%tmp_1 = fcmp ogt float %x_assign, 0.000000e+00" [lib/activ_fun.cpp:5->lib/pool.cpp:26]   --->   Operation 42 'fcmp' 'tmp_1' <Predicate = (icmp_ln19)> <Delay = 6.78> <Core = "FCmp">   --->   Core 111 'FCmp' <Latency = 0> <II = 1> <Delay = 6.78> <FuncUnit> <Opcode : 'fcmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 43 [1/1] (0.00ns) (grouped into LUT with out node select_ln5)   --->   "%and_ln5 = and i1 %or_ln5, %tmp_1" [lib/activ_fun.cpp:5->lib/pool.cpp:26]   --->   Operation 43 'and' 'and_ln5' <Predicate = (icmp_ln19)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 44 [1/1] (0.97ns) (out node of the LUT)   --->   "%select_ln5 = select i1 %and_ln5, float %x_assign, float 0.000000e+00" [lib/activ_fun.cpp:5->lib/pool.cpp:26]   --->   Operation 44 'select' 'select_ln5' <Predicate = (icmp_ln19)> <Delay = 0.97> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 45 [1/1] (0.00ns)   --->   "%trunc_ln26_3 = call i2 @_ssdm_op_PartSelect.i2.i4.i32.i32(i4 %c_0, i32 1, i32 2)" [lib/pool.cpp:26]   --->   Operation 45 'partselect' 'trunc_ln26_3' <Predicate = (icmp_ln19)> <Delay = 0.00>
ST_4 : Operation 46 [1/1] (0.00ns)   --->   "%tmp_2 = call i8 @_ssdm_op_BitConcatenate.i8.i4.i2.i2(i4 %feature_offset_read, i2 %trunc_ln26_1, i2 %trunc_ln26_3)" [lib/pool.cpp:26]   --->   Operation 46 'bitconcatenate' 'tmp_2' <Predicate = (icmp_ln19)> <Delay = 0.00>
ST_4 : Operation 47 [1/1] (0.00ns)   --->   "%zext_ln26 = zext i8 %tmp_2 to i64" [lib/pool.cpp:26]   --->   Operation 47 'zext' 'zext_ln26' <Predicate = (icmp_ln19)> <Delay = 0.00>
ST_4 : Operation 48 [1/1] (0.00ns)   --->   "%pool_feature_addr = getelementptr [160 x float]* %pool_feature, i64 0, i64 %zext_ln26" [lib/pool.cpp:26]   --->   Operation 48 'getelementptr' 'pool_feature_addr' <Predicate = (icmp_ln19)> <Delay = 0.00>
ST_4 : Operation 49 [1/1] (3.25ns)   --->   "store float %select_ln5, float* %pool_feature_addr, align 4" [lib/pool.cpp:26]   --->   Operation 49 'store' <Predicate = (icmp_ln19)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 160> <RAM>
ST_4 : Operation 50 [1/1] (1.73ns)   --->   "%c = add i4 2, %c_0" [lib/pool.cpp:15]   --->   Operation 50 'add' 'c' <Predicate = (icmp_ln19)> <Delay = 1.73> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 51 [1/1] (0.00ns)   --->   "br label %.preheader2" [lib/pool.cpp:15]   --->   Operation 51 'br' <Predicate = (icmp_ln19)> <Delay = 0.00>

State 5 <SV = 4> <Delay = 6.85>
ST_5 : Operation 52 [1/1] (0.00ns)   --->   "%pool_1 = phi float [ %pool_2, %._crit_edge ], [ %pool_0, %.preheader.preheader ]"   --->   Operation 52 'phi' 'pool_1' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 53 [1/1] (0.00ns)   --->   "%pc_0 = phi i2 [ %pc, %._crit_edge ], [ 0, %.preheader.preheader ]"   --->   Operation 53 'phi' 'pc_0' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 54 [1/1] (0.00ns)   --->   "%zext_ln20 = zext i2 %pc_0 to i4" [lib/pool.cpp:20]   --->   Operation 54 'zext' 'zext_ln20' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 55 [1/1] (0.95ns)   --->   "%icmp_ln20 = icmp eq i2 %pc_0, -2" [lib/pool.cpp:20]   --->   Operation 55 'icmp' 'icmp_ln20' <Predicate = true> <Delay = 0.95> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.44> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 56 [1/1] (0.00ns)   --->   "%empty_12 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 2, i64 2, i64 2)"   --->   Operation 56 'speclooptripcount' 'empty_12' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 57 [1/1] (1.56ns)   --->   "%pc = add i2 %pc_0, 1" [lib/pool.cpp:20]   --->   Operation 57 'add' 'pc' <Predicate = true> <Delay = 1.56> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 58 [1/1] (0.00ns)   --->   "br i1 %icmp_ln20, label %.preheader1.loopexit, label %._crit_edge" [lib/pool.cpp:20]   --->   Operation 58 'br' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 59 [1/1] (1.73ns)   --->   "%add_ln22_1 = add i4 %zext_ln20, %c_0" [lib/pool.cpp:22]   --->   Operation 59 'add' 'add_ln22_1' <Predicate = (!icmp_ln20)> <Delay = 1.73> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 60 [1/1] (0.00ns)   --->   "%zext_ln22 = zext i4 %add_ln22_1 to i8" [lib/pool.cpp:22]   --->   Operation 60 'zext' 'zext_ln22' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_5 : Operation 61 [1/1] (1.87ns)   --->   "%add_ln22_2 = add i8 %zext_ln20_1, %zext_ln22" [lib/pool.cpp:22]   --->   Operation 61 'add' 'add_ln22_2' <Predicate = (!icmp_ln20)> <Delay = 1.87> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 62 [1/1] (0.00ns)   --->   "%zext_ln22_1 = zext i8 %add_ln22_2 to i64" [lib/pool.cpp:22]   --->   Operation 62 'zext' 'zext_ln22_1' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_5 : Operation 63 [1/1] (0.00ns)   --->   "%feature_0_addr = getelementptr [64 x float]* %feature_0, i64 0, i64 %zext_ln22_1" [lib/pool.cpp:22]   --->   Operation 63 'getelementptr' 'feature_0_addr' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_5 : Operation 64 [1/1] (0.00ns)   --->   "%feature_1_addr = getelementptr [64 x float]* %feature_1, i64 0, i64 %zext_ln22_1" [lib/pool.cpp:22]   --->   Operation 64 'getelementptr' 'feature_1_addr' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_5 : Operation 65 [1/1] (0.00ns)   --->   "%feature_2_addr = getelementptr [64 x float]* %feature_2, i64 0, i64 %zext_ln22_1" [lib/pool.cpp:22]   --->   Operation 65 'getelementptr' 'feature_2_addr' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_5 : Operation 66 [1/1] (0.00ns)   --->   "%feature_3_addr = getelementptr [64 x float]* %feature_3, i64 0, i64 %zext_ln22_1" [lib/pool.cpp:22]   --->   Operation 66 'getelementptr' 'feature_3_addr' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_5 : Operation 67 [1/1] (0.00ns)   --->   "%feature_4_addr = getelementptr [64 x float]* %feature_4, i64 0, i64 %zext_ln22_1" [lib/pool.cpp:22]   --->   Operation 67 'getelementptr' 'feature_4_addr' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_5 : Operation 68 [1/1] (0.00ns)   --->   "%feature_5_addr = getelementptr [64 x float]* %feature_5, i64 0, i64 %zext_ln22_1" [lib/pool.cpp:22]   --->   Operation 68 'getelementptr' 'feature_5_addr' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_5 : Operation 69 [1/1] (0.00ns)   --->   "%feature_6_addr = getelementptr [64 x float]* %feature_6, i64 0, i64 %zext_ln22_1" [lib/pool.cpp:22]   --->   Operation 69 'getelementptr' 'feature_6_addr' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_5 : Operation 70 [1/1] (0.00ns)   --->   "%feature_7_addr = getelementptr [64 x float]* %feature_7, i64 0, i64 %zext_ln22_1" [lib/pool.cpp:22]   --->   Operation 70 'getelementptr' 'feature_7_addr' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_5 : Operation 71 [1/1] (0.00ns)   --->   "%feature_8_addr = getelementptr [64 x float]* %feature_8, i64 0, i64 %zext_ln22_1" [lib/pool.cpp:22]   --->   Operation 71 'getelementptr' 'feature_8_addr' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_5 : Operation 72 [1/1] (0.00ns)   --->   "%feature_9_addr = getelementptr [64 x float]* %feature_9, i64 0, i64 %zext_ln22_1" [lib/pool.cpp:22]   --->   Operation 72 'getelementptr' 'feature_9_addr' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_5 : Operation 73 [2/2] (3.25ns)   --->   "%feature_0_load = load float* %feature_0_addr, align 4" [lib/pool.cpp:22]   --->   Operation 73 'load' 'feature_0_load' <Predicate = (!icmp_ln20)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 160> <RAM>
ST_5 : Operation 74 [2/2] (3.25ns)   --->   "%feature_1_load = load float* %feature_1_addr, align 4" [lib/pool.cpp:22]   --->   Operation 74 'load' 'feature_1_load' <Predicate = (!icmp_ln20)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 160> <RAM>
ST_5 : Operation 75 [2/2] (3.25ns)   --->   "%feature_2_load = load float* %feature_2_addr, align 4" [lib/pool.cpp:22]   --->   Operation 75 'load' 'feature_2_load' <Predicate = (!icmp_ln20)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 160> <RAM>
ST_5 : Operation 76 [2/2] (3.25ns)   --->   "%feature_3_load = load float* %feature_3_addr, align 4" [lib/pool.cpp:22]   --->   Operation 76 'load' 'feature_3_load' <Predicate = (!icmp_ln20)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 160> <RAM>
ST_5 : Operation 77 [2/2] (3.25ns)   --->   "%feature_4_load = load float* %feature_4_addr, align 4" [lib/pool.cpp:22]   --->   Operation 77 'load' 'feature_4_load' <Predicate = (!icmp_ln20)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 160> <RAM>
ST_5 : Operation 78 [2/2] (3.25ns)   --->   "%feature_5_load = load float* %feature_5_addr, align 4" [lib/pool.cpp:22]   --->   Operation 78 'load' 'feature_5_load' <Predicate = (!icmp_ln20)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 160> <RAM>
ST_5 : Operation 79 [2/2] (3.25ns)   --->   "%feature_6_load = load float* %feature_6_addr, align 4" [lib/pool.cpp:22]   --->   Operation 79 'load' 'feature_6_load' <Predicate = (!icmp_ln20)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 160> <RAM>
ST_5 : Operation 80 [2/2] (3.25ns)   --->   "%feature_7_load = load float* %feature_7_addr, align 4" [lib/pool.cpp:22]   --->   Operation 80 'load' 'feature_7_load' <Predicate = (!icmp_ln20)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 160> <RAM>
ST_5 : Operation 81 [2/2] (3.25ns)   --->   "%feature_8_load = load float* %feature_8_addr, align 4" [lib/pool.cpp:22]   --->   Operation 81 'load' 'feature_8_load' <Predicate = (!icmp_ln20)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 160> <RAM>
ST_5 : Operation 82 [2/2] (3.25ns)   --->   "%feature_9_load = load float* %feature_9_addr, align 4" [lib/pool.cpp:22]   --->   Operation 82 'load' 'feature_9_load' <Predicate = (!icmp_ln20)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 160> <RAM>
ST_5 : Operation 83 [1/1] (0.00ns)   --->   "br label %.preheader1"   --->   Operation 83 'br' <Predicate = (icmp_ln20)> <Delay = 0.00>

State 6 <SV = 5> <Delay = 14.3>
ST_6 : Operation 84 [1/2] (3.25ns)   --->   "%feature_0_load = load float* %feature_0_addr, align 4" [lib/pool.cpp:22]   --->   Operation 84 'load' 'feature_0_load' <Predicate = true> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 160> <RAM>
ST_6 : Operation 85 [1/2] (3.25ns)   --->   "%feature_1_load = load float* %feature_1_addr, align 4" [lib/pool.cpp:22]   --->   Operation 85 'load' 'feature_1_load' <Predicate = true> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 160> <RAM>
ST_6 : Operation 86 [1/2] (3.25ns)   --->   "%feature_2_load = load float* %feature_2_addr, align 4" [lib/pool.cpp:22]   --->   Operation 86 'load' 'feature_2_load' <Predicate = true> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 160> <RAM>
ST_6 : Operation 87 [1/2] (3.25ns)   --->   "%feature_3_load = load float* %feature_3_addr, align 4" [lib/pool.cpp:22]   --->   Operation 87 'load' 'feature_3_load' <Predicate = true> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 160> <RAM>
ST_6 : Operation 88 [1/2] (3.25ns)   --->   "%feature_4_load = load float* %feature_4_addr, align 4" [lib/pool.cpp:22]   --->   Operation 88 'load' 'feature_4_load' <Predicate = true> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 160> <RAM>
ST_6 : Operation 89 [1/2] (3.25ns)   --->   "%feature_5_load = load float* %feature_5_addr, align 4" [lib/pool.cpp:22]   --->   Operation 89 'load' 'feature_5_load' <Predicate = true> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 160> <RAM>
ST_6 : Operation 90 [1/2] (3.25ns)   --->   "%feature_6_load = load float* %feature_6_addr, align 4" [lib/pool.cpp:22]   --->   Operation 90 'load' 'feature_6_load' <Predicate = true> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 160> <RAM>
ST_6 : Operation 91 [1/2] (3.25ns)   --->   "%feature_7_load = load float* %feature_7_addr, align 4" [lib/pool.cpp:22]   --->   Operation 91 'load' 'feature_7_load' <Predicate = true> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 160> <RAM>
ST_6 : Operation 92 [1/2] (3.25ns)   --->   "%feature_8_load = load float* %feature_8_addr, align 4" [lib/pool.cpp:22]   --->   Operation 92 'load' 'feature_8_load' <Predicate = true> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 160> <RAM>
ST_6 : Operation 93 [1/2] (3.25ns)   --->   "%feature_9_load = load float* %feature_9_addr, align 4" [lib/pool.cpp:22]   --->   Operation 93 'load' 'feature_9_load' <Predicate = true> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 160> <RAM>
ST_6 : Operation 94 [1/1] (2.63ns)   --->   "%pool = call float @_ssdm_op_Mux.ap_auto.10float.i4(float %feature_0_load, float %feature_1_load, float %feature_2_load, float %feature_3_load, float %feature_4_load, float %feature_5_load, float %feature_6_load, float %feature_7_load, float %feature_8_load, float %feature_9_load, i4 %feature_offset_read)" [lib/pool.cpp:22]   --->   Operation 94 'mux' 'pool' <Predicate = true> <Delay = 2.63> <Core = "MuxnS">   --->   Core 31 'MuxnS' <Latency = 0> <II = 1> <Delay = 2.63> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 95 [1/1] (0.00ns)   --->   "%bitcast_ln22 = bitcast float %pool to i32" [lib/pool.cpp:22]   --->   Operation 95 'bitcast' 'bitcast_ln22' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 96 [1/1] (0.00ns)   --->   "%tmp_3 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %bitcast_ln22, i32 23, i32 30)" [lib/pool.cpp:22]   --->   Operation 96 'partselect' 'tmp_3' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 97 [1/1] (0.00ns)   --->   "%trunc_ln22 = trunc i32 %bitcast_ln22 to i23" [lib/pool.cpp:22]   --->   Operation 97 'trunc' 'trunc_ln22' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 98 [1/1] (0.00ns)   --->   "%bitcast_ln22_1 = bitcast float %pool_1 to i32" [lib/pool.cpp:22]   --->   Operation 98 'bitcast' 'bitcast_ln22_1' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 99 [1/1] (0.00ns)   --->   "%tmp_4 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %bitcast_ln22_1, i32 23, i32 30)" [lib/pool.cpp:22]   --->   Operation 99 'partselect' 'tmp_4' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 100 [1/1] (0.00ns)   --->   "%trunc_ln22_1 = trunc i32 %bitcast_ln22_1 to i23" [lib/pool.cpp:22]   --->   Operation 100 'trunc' 'trunc_ln22_1' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 101 [1/1] (1.55ns)   --->   "%icmp_ln22 = icmp ne i8 %tmp_3, -1" [lib/pool.cpp:22]   --->   Operation 101 'icmp' 'icmp_ln22' <Predicate = true> <Delay = 1.55> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.44> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 102 [1/1] (2.44ns)   --->   "%icmp_ln22_1 = icmp eq i23 %trunc_ln22, 0" [lib/pool.cpp:22]   --->   Operation 102 'icmp' 'icmp_ln22_1' <Predicate = true> <Delay = 2.44> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.44> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 103 [1/1] (0.00ns) (grouped into LUT with out node and_ln22_1)   --->   "%or_ln22 = or i1 %icmp_ln22_1, %icmp_ln22" [lib/pool.cpp:22]   --->   Operation 103 'or' 'or_ln22' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 104 [1/1] (1.55ns)   --->   "%icmp_ln22_2 = icmp ne i8 %tmp_4, -1" [lib/pool.cpp:22]   --->   Operation 104 'icmp' 'icmp_ln22_2' <Predicate = true> <Delay = 1.55> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.44> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 105 [1/1] (2.44ns)   --->   "%icmp_ln22_3 = icmp eq i23 %trunc_ln22_1, 0" [lib/pool.cpp:22]   --->   Operation 105 'icmp' 'icmp_ln22_3' <Predicate = true> <Delay = 2.44> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.44> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 106 [1/1] (0.00ns) (grouped into LUT with out node and_ln22_1)   --->   "%or_ln22_1 = or i1 %icmp_ln22_3, %icmp_ln22_2" [lib/pool.cpp:22]   --->   Operation 106 'or' 'or_ln22_1' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 107 [1/1] (0.00ns) (grouped into LUT with out node and_ln22_1)   --->   "%and_ln22 = and i1 %or_ln22, %or_ln22_1" [lib/pool.cpp:22]   --->   Operation 107 'and' 'and_ln22' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 108 [1/1] (6.78ns)   --->   "%tmp_5 = fcmp ogt float %pool, %pool_1" [lib/pool.cpp:22]   --->   Operation 108 'fcmp' 'tmp_5' <Predicate = true> <Delay = 6.78> <Core = "FCmp">   --->   Core 111 'FCmp' <Latency = 0> <II = 1> <Delay = 6.78> <FuncUnit> <Opcode : 'fcmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 109 [1/1] (0.97ns) (out node of the LUT)   --->   "%and_ln22_1 = and i1 %and_ln22, %tmp_5" [lib/pool.cpp:22]   --->   Operation 109 'and' 'and_ln22_1' <Predicate = true> <Delay = 0.97> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 110 [1/1] (0.69ns) (out node of the LUT)   --->   "%pool_2 = select i1 %and_ln22_1, float %pool, float %pool_1" [lib/pool.cpp:22]   --->   Operation 110 'select' 'pool_2' <Predicate = true> <Delay = 0.69> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 111 [1/1] (0.00ns)   --->   "br label %.preheader" [lib/pool.cpp:20]   --->   Operation 111 'br' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 100ns, clock uncertainty: 0.12ns.

 <State 1>: 1.77ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('r') with incoming values : ('r', lib/pool.cpp:13) [18]  (1.77 ns)

 <State 2>: 1.77ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('c') with incoming values : ('c', lib/pool.cpp:15) [26]  (1.77 ns)

 <State 3>: 1.77ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('pool_0', lib/pool.cpp:22) with incoming values : ('pool', lib/pool.cpp:22) [33]  (1.77 ns)

 <State 4>: 39.2ns
The critical path consists of the following:
	'phi' operation ('pool_0', lib/pool.cpp:22) with incoming values : ('pool', lib/pool.cpp:22) [33]  (0 ns)
	'fadd' operation ('x', lib/pool.cpp:26) [99]  (28.2 ns)
	'fcmp' operation ('tmp_1', lib/activ_fun.cpp:5->lib/pool.cpp:26) [106]  (6.79 ns)
	'and' operation ('and_ln5', lib/activ_fun.cpp:5->lib/pool.cpp:26) [107]  (0 ns)
	'select' operation ('x', lib/activ_fun.cpp:5->lib/pool.cpp:26) [108]  (0.978 ns)
	'store' operation ('store_ln26', lib/pool.cpp:26) of variable 'x', lib/activ_fun.cpp:5->lib/pool.cpp:26 on array 'pool_feature' [113]  (3.25 ns)

 <State 5>: 6.86ns
The critical path consists of the following:
	'phi' operation ('pc') with incoming values : ('pc', lib/pool.cpp:20) [47]  (0 ns)
	'add' operation ('add_ln22_1', lib/pool.cpp:22) [54]  (1.74 ns)
	'add' operation ('add_ln22_2', lib/pool.cpp:22) [56]  (1.87 ns)
	'getelementptr' operation ('feature_0_addr', lib/pool.cpp:22) [58]  (0 ns)
	'load' operation ('feature_0_load', lib/pool.cpp:22) on array 'feature_0' [68]  (3.25 ns)

 <State 6>: 14.3ns
The critical path consists of the following:
	'load' operation ('feature_0_load', lib/pool.cpp:22) on array 'feature_0' [68]  (3.25 ns)
	'mux' operation ('pool', lib/pool.cpp:22) [78]  (2.63 ns)
	'fcmp' operation ('tmp_5', lib/pool.cpp:22) [92]  (6.79 ns)
	'and' operation ('and_ln22_1', lib/pool.cpp:22) [93]  (0.978 ns)
	'select' operation ('pool', lib/pool.cpp:22) [94]  (0.698 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
